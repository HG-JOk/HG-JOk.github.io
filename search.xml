<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客技术总结</title>
      <link href="/2022/02/18/%E5%8D%9A%E5%AE%A2%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
      <url>/2022/02/18/%E5%8D%9A%E5%AE%A2%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="1-技术介绍"><a href="#1-技术介绍" class="headerlink" title="1.技术介绍"></a>1.技术介绍</h2><p>前端：vue + vuex + vue-router + axios + vuetify + element + echarts</p><p>后端：SpringBoot + nginx  + SpringSecurity + Swagger2 + MyBatisPlus + Mysql + Redis + elasticsearch + rabbitMQ + MaxWell</p><h2 id="2-运行环境"><a href="#2-运行环境" class="headerlink" title="2.运行环境"></a>2.运行环境</h2><p>开发工具：IDEA</p><p>服务器：腾讯1核2G CentOS8.0以上</p><p>对象存储：腾讯云OSS</p><p>全站cdn加速、</p><p>cos对象储存</p><p>全站https</p><h2 id="4-项目总结"><a href="#4-项目总结" class="headerlink" title="4.项目总结"></a>4.项目总结</h2><p>此次对博客进行了全方位的升级，前端技术点和后端技术点相比第一，二版提升了不少。</p><p>加入了许多动画过渡效果，并考虑到了一些用户细节（深色模式，图片预览，等），评论加入了表情和分页，提升了用户体验，。后台文章编辑器换为MarkDown，语法更加简洁，新增了草稿箱和自动保存文章等功能。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 中添加 lottie 动画</title>
      <link href="/2022/02/17/Vue-%E4%B8%AD%E6%B7%BB%E5%8A%A0-lottie-%E5%8A%A8%E7%94%BB/"/>
      <url>/2022/02/17/Vue-%E4%B8%AD%E6%B7%BB%E5%8A%A0-lottie-%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="1、修改前"><a href="#1、修改前" class="headerlink" title="1、修改前"></a>1、修改前</h1><p><img src="/static/attach/20220214/2206cccdcd4a49a19ffa7475f60b87a5.png"></p><h1 id="2、在vue中引入lottie"><a href="#2、在vue中引入lottie" class="headerlink" title="2、在vue中引入lottie"></a>2、在vue中引入lottie</h1><pre><code>npm install --save vue-lottie</code></pre><h1 id="3、全局引入-vue-lottie"><a href="#3、全局引入-vue-lottie" class="headerlink" title="3、全局引入 vue-lottie"></a>3、全局引入 vue-lottie</h1><p>在 main.js 引入并注册全局组件即可，当然你也可以局部引入，我用的局部引入</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lottie <span class="keyword">from</span> <span class="string">&#x27;vue-lottie&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;lottie&#x27;</span>, lottie)</span><br></pre></td></tr></table></figure><h1 id="4、引入你的-lottie-资源"><a href="#4、引入你的-lottie-资源" class="headerlink" title="4、引入你的 lottie 资源"></a>4、引入你的 lottie 资源</h1><p>用相关里面的代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//相关 star</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> animationData  <span class="keyword">from</span> <span class="string">&quot;@/assets/errorJSON/404.json&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Lottie</span> <span class="keyword">from</span> <span class="string">&#x27;vue-lottie&#x27;</span></span><br><span class="line"><span class="comment">//相关 end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Exception404&#x27;</span>,</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//相关 star</span></span><br><span class="line">  <span class="attr">components</span>:&#123;<span class="title class_">Lottie</span>&#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">//其中 animationData.default 是重点，之前看了好多网上教程都是没有加这个，就没有做成功，加上 default 就好了</span></span><br><span class="line">      <span class="attr">defaultOptions</span>: &#123; <span class="attr">animationData</span>: animationData.<span class="property">default</span> &#125;,</span><br><span class="line">      <span class="attr">animationSpeed</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">anim</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">handleAnimation</span>: <span class="keyword">function</span>(<span class="params">anim</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">anim</span> = anim;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(anim); <span class="comment">//这里可以看到 lottie 对象的全部属性</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="comment">//相关 end</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">classes</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&#x27;ele-exception ele-text-center&#x27;</span>,</span><br><span class="line">        &#123;<span class="string">&#x27;ele-exception-dark&#x27;</span>: <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">theme</span>.<span class="property">darkMode</span>&#125;</span><br><span class="line">      ];</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="5、结果"><a href="#5、结果" class="headerlink" title="5、结果"></a>5、结果</h1><p><img src="https://img-blog.csdnimg.cn/20210413113926936.gif#pic_center"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> lottie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何把部署到服务器上的springboot项目持续在后台运行(旧版)</title>
      <link href="/2022/02/17/%E5%A6%82%E4%BD%95%E6%8A%8A%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84springboot%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E5%9C%A8%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C-%E6%97%A7%E7%89%88/"/>
      <url>/2022/02/17/%E5%A6%82%E4%BD%95%E6%8A%8A%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84springboot%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E5%9C%A8%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C-%E6%97%A7%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="后台持续运行项目"><a href="#后台持续运行项目" class="headerlink" title="后台持续运行项目"></a>后台持续运行项目</h1><p>部署发布自己的springboot项目时可以通过</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar 项目名.jar</span><br></pre></td></tr></table></figure><p>让它在服务器上运行，但一旦断开ssh连接，项目就会停止运行，这样我们就不能访问我们发布的项目了，如果只为了运行一个项目我们还得用一台电脑一直挂着，这显然是不合理的，不现实的。</p><p>我们可以通过nohup来实现关掉ssh连接后项目还是会在服务器上运行。</p><ul><li>输入命令<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">nohup java -jar 项目名.jar &amp;</span><br></pre></td></tr></table></figure>回车之后会显示进程号，这个进程号就是你的项目后台运行的进程号。</li></ul><p>nohup: 不挂断的执行命令，忽略所有的挂断信号。 运行后台命令 最后加 &amp;<br>在jar目录下会生成一个nohup.out文件，默认的log输出到这里了</p><p>下面的命令表示<br>· 不挂断的后台启动 demo.jar，<br>· “2&gt;&amp;1” 表示 错误和输出都传到nohup.out文件中，默认状态只把输出输出到nohup.out文件中<br>· nohup 命令默认输出到nohup.out文件中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">nohup java -jar demo.jar &gt;./log.txt  <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure><h1 id="关闭后台已运行的项目"><a href="#关闭后台已运行的项目" class="headerlink" title="关闭后台已运行的项目"></a>关闭后台已运行的项目</h1><ul><li>先找到自己项目的进程id<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ps -aux | grep 项目名</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210506163123646.png"></li></ul><h1 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">kill <span class="number">9</span> 进程id</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot中PageHelper 分页查询使用方法</title>
      <link href="/2022/02/17/Springboot%E4%B8%ADPageHelper-%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2022/02/17/Springboot%E4%B8%ADPageHelper-%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一：导入依赖"><a href="#一：导入依赖" class="headerlink" title="一：导入依赖"></a>一：导入依赖</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">1.2</span><span class="number">.13</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="二：配置yml文件中PageHelper的属性"><a href="#二：配置yml文件中PageHelper的属性" class="headerlink" title="二：配置yml文件中PageHelper的属性"></a>二：配置yml文件中PageHelper的属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pagehelper:                #分页插件</span><br><span class="line">  helper-dialect: mysql</span><br><span class="line">  reasonable: <span class="literal">true</span></span><br><span class="line">  support-methods-arguments: <span class="literal">true</span></span><br><span class="line">  params:</span><br></pre></td></tr></table></figure><h3 id="三：在controller类中使用，"><a href="#三：在controller类中使用，" class="headerlink" title="三：在controller类中使用，"></a>三：在controller类中使用，</h3><h5 id="1-在查询方法上调用PageHelper-startPage-方法，设置分页的页数和每页信息数，"><a href="#1-在查询方法上调用PageHelper-startPage-方法，设置分页的页数和每页信息数，" class="headerlink" title="1.在查询方法上调用PageHelper.startPage()方法，设置分页的页数和每页信息数，"></a>1.在查询方法上调用PageHelper.startPage()方法，设置分页的页数和每页信息数，</h5><h5 id="2-将查询出来的结果集用PageInfo的构造函数初始化为一个分页结果对象"><a href="#2-将查询出来的结果集用PageInfo的构造函数初始化为一个分页结果对象" class="headerlink" title="2.将查询出来的结果集用PageInfo的构造函数初始化为一个分页结果对象"></a>2.将查询出来的结果集用PageInfo的构造函数初始化为一个分页结果对象</h5><h5 id="3-将分页结果对象存入model，返回前端页面"><a href="#3-将分页结果对象存入model，返回前端页面" class="headerlink" title="3.将分页结果对象存入model，返回前端页面"></a>3.将分页结果对象存入model，返回前端页面</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/types&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">types</span><span class="params">(<span class="meta">@RequestParam(required = false,defaultValue = &quot;1&quot;,value = &quot;pagenum&quot;)</span><span class="type">int</span> pagenum, Model model)</span>&#123;</span><br><span class="line"></span><br><span class="line">    PageHelper.startPage(pagenum, <span class="number">5</span>);  <span class="comment">//pagenum：页数，pagesize:每页的信息数</span></span><br><span class="line">    </span><br><span class="line">    List&lt;Type&gt; allType = typeService.getAllType(); <span class="comment">//调用业务层查询方法</span></span><br><span class="line">    </span><br><span class="line">    PageInfo&lt;Type&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(allType); <span class="comment">//得到分页结果对象</span></span><br><span class="line">    </span><br><span class="line">    model.addAttribute(<span class="string">&quot;pageInfo&quot;</span>, pageInfo);  <span class="comment">//携带分页结果信息</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;admin/types&quot;</span>;  <span class="comment">//回到前端展示页面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四：前端展示分页（thymeleaf-semantic-ui）-这里ui用自己的就行，比如bootstrap或layui，主要是thymeleaf的使用。"><a href="#四：前端展示分页（thymeleaf-semantic-ui）-这里ui用自己的就行，比如bootstrap或layui，主要是thymeleaf的使用。" class="headerlink" title="四：前端展示分页（thymeleaf+semantic-ui）,这里ui用自己的就行，比如bootstrap或layui，主要是thymeleaf的使用。"></a>四：前端展示分页（thymeleaf+semantic-ui）,这里ui用自己的就行，比如bootstrap或layui，主要是thymeleaf的使用。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;table  class=<span class="string">&quot;ui compact celled teal table&quot;</span>&gt;</span><br><span class="line">  &lt;thead&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;/thead&gt;</span><br><span class="line">  &lt;tbody&gt;</span><br><span class="line">  &lt;tr th:each=<span class="string">&quot;type, iterStat : $&#123;pageInfo.list&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;td th:text=<span class="string">&quot;$&#123;iterStat.count&#125;&quot;</span>&gt;<span class="number">1</span>&lt;/td&gt;</span><br><span class="line">    &lt;td th:text=<span class="string">&quot;$&#123;type.name&#125;&quot;</span>&gt;摸鱼方法&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;</span><br><span class="line">      &lt;a href=<span class="string">&quot;#&quot;</span> th:href=<span class="string">&quot;@&#123;/admin/types/&#123;id&#125;/input(id=$&#123;type.id&#125;)&#125;&quot;</span> class=<span class="string">&quot;ui mini teal basic button&quot;</span>&gt;编辑&lt;/a&gt;</span><br><span class="line">      &lt;a href=<span class="string">&quot;#&quot;</span> th:href=<span class="string">&quot;@&#123;/admin/types/&#123;id&#125;/delete(id=$&#123;type.id&#125;)&#125;&quot;</span> class=<span class="string">&quot;ui mini red basic button&quot;</span>&gt;删除&lt;/a&gt;</span><br><span class="line">    &lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;/tbody&gt;</span><br><span class="line">  &lt;tfoot&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th colspan=<span class="string">&quot;7&quot;</span>&gt;</span><br><span class="line">      &lt;div class=<span class="string">&quot;ui mini pagination menu&quot;</span>  &gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;item&quot;</span>&gt;&lt;a th:href=<span class="string">&quot;@&#123;/admin/types&#125;&quot;</span>&gt;首页&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;item&quot;</span>&gt;&lt;a th:href=<span class="string">&quot;@&#123;/admin/types(pagenum=$&#123;pageInfo.hasPreviousPage&#125;?$&#123;pageInfo.prePage&#125;:1)&#125;&quot;</span>&gt;上一页&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;item&quot;</span>&gt;&lt;a th:href=<span class="string">&quot;@&#123;/admin/types(pagenum=$&#123;pageInfo.hasNextPage&#125;?$&#123;pageInfo.nextPage&#125;:$&#123;pageInfo.pages&#125;)&#125;&quot;</span>&gt;下一页&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;item&quot;</span>&gt;&lt;a th:href=<span class="string">&quot;@&#123;/admin/types(pagenum=$&#123;pageInfo.pages&#125;)&#125;&quot;</span>&gt;尾页&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;a href=<span class="string">&quot;#&quot;</span> th:href=<span class="string">&quot;@&#123;/admin/types/input&#125;&quot;</span> class=<span class="string">&quot;ui mini right floated teal basic button&quot;</span>&gt;新增&lt;/a&gt;</span><br><span class="line">    &lt;/th&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;/tfoot&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;ui segment m-inline-block&quot;</span>&gt;</span><br><span class="line">  &lt;p &gt;当前第&lt;span th:text=<span class="string">&quot;$&#123;pageInfo.pageNum&#125;&quot;</span>&gt;&lt;/span&gt;页，总&lt;span th:text=<span class="string">&quot;$&#123;pageInfo.pages&#125;&quot;</span>&gt;&lt;/span&gt;页，共&lt;span th:text=<span class="string">&quot;$&#123;pageInfo.total&#125;&quot;</span>&gt;&lt;/span&gt;条记录&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="五：效果展示（pagesize设置为5的效果）"><a href="#五：效果展示（pagesize设置为5的效果）" class="headerlink" title="五：效果展示（pagesize设置为5的效果）"></a>五：效果展示（pagesize设置为5的效果）</h3><p><img src="https://img-blog.csdnimg.cn/20200310105006168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODA0NzM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud学习笔记</title>
      <link href="/2022/02/17/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/02/17/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.kuangstudy.com/bbs/1374942542566551554" title="Springcloud在线学习笔记">Springcloud在线学习笔记</a></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用三种软件安装方式及服务器基本环境搭建</title>
      <link href="/2022/02/17/Linux%E5%B8%B8%E7%94%A8%E4%B8%89%E7%A7%8D%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F%E5%8F%8A%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/02/17/Linux%E5%B8%B8%E7%94%A8%E4%B8%89%E7%A7%8D%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F%E5%8F%8A%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="jdk安装（rpm安装）"><a href="#jdk安装（rpm安装）" class="headerlink" title="jdk安装（rpm安装）"></a>jdk安装（rpm安装）</h3><p>1、rpmjdk下载地址<br><a href="https://repo.huaweicloud.com/java/jdk/">https://repo.huaweicloud.com/java/jdk/</a></p><p>2、如果有安装openjdk 则卸载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kuangshen ~]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_121&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_121-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)</span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">[root@kuangshen ~]<span class="comment"># rpm -qa|grep jdk</span></span><br><span class="line">jdk1.8.0_121-1.8.0_121-fcs.x86_64</span><br><span class="line"><span class="comment"># 卸载 -e --nodeps 强制删除</span></span><br><span class="line">[root@kuangshen ~]<span class="comment"># rpm -e --nodeps jdk1.8.0_121-1.8.0_121-fcs.x86_64</span></span><br><span class="line">[root@kuangshen ~]<span class="comment"># java -version</span></span><br><span class="line">-bash: /usr/bin/java: No such file or directory  <span class="comment"># OK</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、安装JDK</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装java rpm</span></span><br><span class="line">[root@kuangshen kuangshen]<span class="comment"># rpm -ivh jdk-8u221-linux-x64.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成后配置环境变量 文件：/etc/profile</span></span><br><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_221-amd64</span><br><span class="line">CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/jre/bin</span><br><span class="line"><span class="built_in">export</span> PATH CLASSPATH JAVA_HOME</span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让新增的环境变量生效！</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试 java -version</span></span><br><span class="line">[root@kuangshen java]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_221&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_221-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)</span><br></pre></td></tr></table></figure><h3 id="Tomcat安装（解压缩安装）"><a href="#Tomcat安装（解压缩安装）" class="headerlink" title="Tomcat安装（解压缩安装）"></a>Tomcat安装（解压缩安装）</h3><p>1、安装好了Java环境后我们可以测试下Tomcat！准备好Tomcat的安装包！</p><p>2、将文件移动到&#x2F;usr&#x2F;tomcat&#x2F;下，并解压！</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kuangshen kuangshen]<span class="comment"># mv apache-tomcat-9.0.22.tar.gz /usr</span></span><br><span class="line">[root@kuangshen kuangshen]<span class="comment"># cd /usr</span></span><br><span class="line">[root@kuangshen usr]<span class="comment"># ls</span></span><br><span class="line">apache-tomcat-9.0.22.tar.gz</span><br><span class="line">[root@kuangshen usr]<span class="comment"># tar -zxvf apache-tomcat-9.0.22.tar.gz   # 解压</span></span><br></pre></td></tr></table></figure><p>3、运行Tomcat，进入bin目录，和我们以前在Windows下看的都是一样的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行：startup.sh --&gt;启动tomcat</span></span><br><span class="line"><span class="comment"># 执行：shutdown.sh --&gt;关闭tomcat</span></span><br><span class="line">./startup.sh</span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure><p>4、确保Linux的防火墙端口是开启的，如果是阿里云，需要保证阿里云的安全组策略是开放的！</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看firewall服务状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启、重启、关闭、firewalld.service服务</span></span><br><span class="line"><span class="comment"># 开启</span></span><br><span class="line">service firewalld start</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">service firewalld restart</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">service firewalld stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看防火墙规则</span></span><br><span class="line">firewall-cmd --list-all    <span class="comment"># 查看全部信息</span></span><br><span class="line">firewall-cmd --list-ports  <span class="comment"># 只看端口信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启端口</span></span><br><span class="line">开端口命令：firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">重启防火墙：systemctl restart firewalld.service</span><br><span class="line"></span><br><span class="line">命令含义：</span><br><span class="line">--zone <span class="comment">#作用域</span></span><br><span class="line">--add-port=80/tcp  <span class="comment">#添加端口，格式为：端口/通讯协议</span></span><br><span class="line">--permanent   <span class="comment">#永久生效，没有此参数重启后失效</span></span><br></pre></td></tr></table></figure><h3 id="安装Docker（yum安装）"><a href="#安装Docker（yum安装）" class="headerlink" title="安装Docker（yum安装）"></a>安装Docker（yum安装）</h3><blockquote><p>基于 CentOS 7 安装</p></blockquote><ol><li><p>官网安装参考手册：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p></li><li><p>确定你是CentOS7及以上版本</p></li></ol> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@192 Desktop]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.2.1511 (Core)</span><br></pre></td></tr></table></figure><ol start="3"><li>yum安装gcc相关（需要确保 虚拟机可以上外网 ）</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><ol start="4"><li><p>卸载旧版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y remove docker docker-common docker-selinux docker-engine</span><br><span class="line">  <span class="comment"># 官网版本</span></span><br><span class="line">  yum remove docker \</span><br><span class="line">            docker-client \</span><br><span class="line">            docker-client-latest \</span><br><span class="line">            docker-common \</span><br><span class="line">            docker-latest \</span><br><span class="line">            docker-latest-logrotate \</span><br><span class="line">            docker-logrotate \</span><br><span class="line">            docker-engine</span><br></pre></td></tr></table></figure></li><li><p>安装需要的软件包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li><li><p>设置stable镜像仓库</p></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 错误</span></span><br><span class="line">  yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">  <span class="comment">## 报错</span></span><br><span class="line">  [Errno 14] curl<span class="comment">#35 - TCP connection reset by peer</span></span><br><span class="line">  [Errno 12] curl<span class="comment">#35 - Timeout</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 正确推荐使用国内的</span></span><br><span class="line">  yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ol start="7"><li>更新yum软件包索引</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><ol start="8"><li>安装Docker CE</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><ol start="9"><li><p>启动docker</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>测试</p></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line">   </span><br><span class="line">   docker run hello-world</span><br><span class="line">   </span><br><span class="line">   docker images</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="宝塔面板安装"><a href="#宝塔面板安装" class="headerlink" title="宝塔面板安装"></a>宝塔面板安装</h3><p><a href="https://www.bt.cn/bbs/thread-19376-1-1.html">https://www.bt.cn/bbs/thread-19376-1-1.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决windows系统80端口被占用问题</title>
      <link href="/2022/02/17/%E8%A7%A3%E5%86%B3windows%E7%B3%BB%E7%BB%9F80%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2022/02/17/%E8%A7%A3%E5%86%B3windows%E7%B3%BB%E7%BB%9F80%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>80端口被 system (pid&#x3D;4) 系统占用的解决方法，80端口占用后服务器无法运行</p></blockquote><p>80端口一般被当做网页服务器的默认端口，使用本机搭建服务器环境的时候，都会默认使用80端口来作为网页访问端，但是有的时候80端口会被其他的不明身份的程序占用，导致 Apache 启动失败，修改 Apache 的默认端口后访问本机地址又非常麻烦。下面介绍一下如果80端口被占用后应该如何处理。</p><h2 id="查找80端口被谁占用的方法"><a href="#查找80端口被谁占用的方法" class="headerlink" title="查找80端口被谁占用的方法"></a>查找80端口被谁占用的方法</h2><p>进入命令提示行（开始运行输入 CMD），输入命令 <code>netstat -ano|findstr 80</code> (显示包含:80的网络连接) ，就可以看到本机所有端口的使用情况，一般80端口在第一行，截图显示，端口已经被占用，PID 中写明 LISTENING 4。</p><p><img src="https://images2018.cnblogs.com/blog/1469487/201808/1469487-20180821213237670-1716102239.png"></p><p>PID&#x3D;4 的程序是哪一个呢？接着在命令提示和下输入指令 <code>tasklist</code> ，列出所有当前运行的进程，<br>发现 PID&#x3D;4 的进程，居然是 system 。</p><p><img src="https://images2018.cnblogs.com/blog/1469487/201808/1469487-20180821213250217-1448364720.png"></p><ul><li>扩展：也可以通过任务管理器查看PID：<br><img src="https://images2018.cnblogs.com/blog/1469487/201808/1469487-20180821213259751-392434541.png"></li></ul><p><img src="https://images2018.cnblogs.com/blog/1469487/201808/1469487-20180821213309210-517669532.png"></p><h2 id="取消-system-进程对80端口的占用"><a href="#取消-system-进程对80端口的占用" class="headerlink" title="取消 system 进程对80端口的占用"></a>取消 system 进程对80端口的占用</h2><p>系统占用的端口一般都是微软官方的产品占用的。所以这个时候主要考虑到几个服务：</p><ol><li>SQL Server导致。其中很有可能是SQL Server Reporting Services (MSSQLSERVER)，它是 SQL Server 的日志系统。</li><li>IIS 服务。如果你电脑安装了这个，很有可能它在运行着，那么它就占用着80端口</li></ol><p>当然如果都不是这两个原因的话，可以使用下下面的解决方法</p><h3 id="关闭方式"><a href="#关闭方式" class="headerlink" title="关闭方式"></a>关闭方式</h3><p>关闭方法很简单，在运行框中输入 <code>services.msc</code> ，进入服务窗口。或者直接在开始菜单里面的搜索框中输入“服务”即可打开。然后找到 <code>SQL Server Reporting Services (MSSQLSERVER)</code> 这个服务，然后停止，被占用的80端口就被释放出来了。你也可以设置它的启动方式为“禁用”。<br><img src="https://images2018.cnblogs.com/blog/1469487/201808/1469487-20180821213323251-2058397571.png"></p><blockquote><p>对于iis的服务也可以用此方法解决</p></blockquote><h3 id="关闭方式二-针对还是没办法解决的"><a href="#关闭方式二-针对还是没办法解决的" class="headerlink" title="关闭方式二(针对还是没办法解决的)"></a>关闭方式二(针对还是没办法解决的)</h3><ol><li>使用管理员身份运行 cmd</li><li><code>net stop http</code> &#x2F;&#x2F;停止系统http服务</li><li><code>sc config http start= disabled</code> &#x2F;&#x2F;禁用服务的自动启动，此处注意等号后面的空格不可少</li></ol><p><img src="https://images2018.cnblogs.com/blog/1469487/201808/1469487-20180822204642355-1166069719.png"></p><p>这个时候80端口就会被释放，你可以重启你的应用程序啦</p>]]></content>
      
      
      <categories>
          
          <category> 端口 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx快速入门</title>
      <link href="/2022/02/17/Nginx%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2022/02/17/Nginx%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_45408390/article/details/119457559" title="点击查看">点击查看</a></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反向代理 </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何解决failed to push some refs to git</title>
      <link href="/2022/02/17/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3failed-to-push-some-refs-to-git/"/>
      <url>/2022/02/17/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3failed-to-push-some-refs-to-git/</url>
      
        <content type="html"><![CDATA[<h6 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h6><h6 id="在使用git-对源代码进行push到gitHub时可能会出错"><a href="#在使用git-对源代码进行push到gitHub时可能会出错" class="headerlink" title="在使用git 对源代码进行push到gitHub时可能会出错"></a>在使用git 对源代码进行push到gitHub时可能会出错</h6><h6 id="此时很多人会尝试下面的命令把当前分支代码上传到master分支上。"><a href="#此时很多人会尝试下面的命令把当前分支代码上传到master分支上。" class="headerlink" title="此时很多人会尝试下面的命令把当前分支代码上传到master分支上。"></a>此时很多人会尝试下面的命令把当前分支代码上传到master分支上。</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p>但依然没能解决问题</p><h6 id="出现错误的主要原因是github中的README-md文件不在本地代码目录中"><a href="#出现错误的主要原因是github中的README-md文件不在本地代码目录中" class="headerlink" title="出现错误的主要原因是github中的README.md文件不在本地代码目录中"></a>出现错误的主要原因是github中的README.md文件不在本地代码目录中</h6><h6 id="可以通过如下命令进行代码合并【注：pull-x3D-fetch-merge"><a href="#可以通过如下命令进行代码合并【注：pull-x3D-fetch-merge" class="headerlink" title="可以通过如下命令进行代码合并【注：pull&#x3D;fetch+merge]"></a>可以通过如下命令进行代码合并【注：pull&#x3D;fetch+merge]</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><h6 id="执行上面代码后可以看到本地代码库中多了README-md文件"><a href="#执行上面代码后可以看到本地代码库中多了README-md文件" class="headerlink" title="执行上面代码后可以看到本地代码库中多了README.md文件"></a>执行上面代码后可以看到本地代码库中多了README.md文件</h6><h6 id="此时再执行如下语句即可完成代码上传到github"><a href="#此时再执行如下语句即可完成代码上传到github" class="headerlink" title="此时再执行如下语句即可完成代码上传到github"></a>此时再执行如下语句即可完成代码上传到github</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 避坑 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口占用排查</title>
      <link href="/2022/02/17/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%8E%92%E6%9F%A5/"/>
      <url>/2022/02/17/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%8E%92%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>首先按住 win + R ，输入 cmd ，回车</p><p><strong>查看端口占用情况</strong></p><p>使用 netstat -ano|findstr 命令查看</p><p>比如我想看 8080 端口的占用情况</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ano|findstr &quot;8080&quot;</span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/i-beta/1491349/201912/1491349-20191203135144320-1063615737.png"></p><p>可以看到如上，1388 就是就是进程的 id，也就是pid</p><p><strong>通过 pid 查找相应程序</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist|findstr &quot;1388&quot;</span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/i-beta/1491349/201912/1491349-20191203135626121-529094445.png"></p><p><strong>结束进程</strong></p><p>通过进程名  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">taskkill /f /t /im chrome.exe</span><br></pre></td></tr></table></figure><p>通过pid     </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">taskkill /f /pid 1388</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus学习笔记</title>
      <link href="/2022/02/17/MyBatis-Plus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/02/17/MyBatis-Plus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatisPlus学习笔记-以下配置与时俱进，最新请查看官方文档"><a href="#MyBatisPlus学习笔记-以下配置与时俱进，最新请查看官方文档" class="headerlink" title="MyBatisPlus学习笔记(以下配置与时俱进，最新请查看官方文档)"></a>MyBatisPlus学习笔记(以下配置与时俱进，最新请查看官方文档)</h1><h2 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li>损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作，BaseMapper</li><li>强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求，以后简单的CRUD操作，不用自己编写了 ！</li><li>支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li>支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li>支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li>支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）</li><li>内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用（自动帮你生成代码）</li><li>内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li>分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li>内置性能分析插件：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li>内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>*<strong>官方链接：<a href="https://baomidou.com/guide//">https://baomidou.com/guide/\</a>*</strong></p><h3 id="导入Pom配置文件"><a href="#导入Pom配置文件" class="headerlink" title="导入Pom配置文件"></a>导入Pom配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--1.数据库驱动--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--2.lombok--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--3.mybatis-plus  版本很重要3.0.5--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--4.h2--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="连接数据库配置"><a href="#连接数据库配置" class="headerlink" title="连接数据库配置"></a>连接数据库配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin123</span></span><br></pre></td></tr></table></figure><h3 id="编写实体类"><a href="#编写实体类" class="headerlink" title="编写实体类"></a>编写实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsk.pojo;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写实体类对应的mapper接口"><a href="#编写实体类对应的mapper接口" class="headerlink" title="编写实体类对应的mapper接口"></a>编写实体类对应的mapper接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsk.mapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.wsk.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="comment">//在对应的接口上面继承一个基本的接口 BaseMapper</span></span><br><span class="line"><span class="meta">@Repository</span><span class="comment">//代表持久层</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">//所有CRUD操作都编写完成了，不用像以前一样配置一大堆文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进行Test测试"><a href="#进行Test测试" class="headerlink" title="进行Test测试"></a>进行Test测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsk;</span><br><span class="line"><span class="keyword">import</span> com.wsk.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.wsk.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MybatisPlusApplicationTests</span> &#123;</span><br><span class="line">    <span class="comment">//继承了BaseMapper，所有的方法都来自父类，我们也可以编写自己的扩展方法！</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//参数是一个wrapper ，条件构造器，这里我们先不用 null</span></span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="literal">null</span>);<span class="comment">//查询全部的用户</span></span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudyf4ee90fd-6175-463f-88ad-12329d31d7a5.png"></p><h2 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h2><p><code>我们所有的sql是不可见的，我们希望知道他们是怎么执行的，所以要配置日志知道</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mybatis-plus日志配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment">#输入信息到控制台,也可以输出到日志框架</span></span><br></pre></td></tr></table></figure><h3 id="日志打印信息"><a href="#日志打印信息" class="headerlink" title="日志打印信息"></a>日志打印信息</h3><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudy0a6766de-b2ed-4adf-8344-1f11b1bff264.png"></p><h2 id="CRUD扩展"><a href="#CRUD扩展" class="headerlink" title="CRUD扩展"></a>CRUD扩展</h2><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//测试插入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;wsk&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;2803708553@qq.com&quot;</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insert(user); <span class="comment">//会帮我们自动生成id</span></span><br><span class="line">    System.out.println(result); <span class="comment">//受影响的行数</span></span><br><span class="line">    System.out.println(user); <span class="comment">//通过日志发现id会自动回填</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudy0a6766de-b2ed-4adf-8344-1f11b1bff264.png"></p><p><strong>数据库插入的id的默认值为:全局的唯—id</strong></p><h3 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h3><p><strong>源码解释</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">IdType</span> &#123;</span><br><span class="line">    AUTO, <span class="comment">//数据库id自增</span></span><br><span class="line">    INPUT, <span class="comment">//手动输入</span></span><br><span class="line">    ID_WORKER, <span class="comment">//默认的全局唯一id</span></span><br><span class="line">    UUID, <span class="comment">//全局唯一id  uuid</span></span><br><span class="line">    NONE;<span class="comment">//未设置主键</span></span><br><span class="line">    **</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>*<strong>默认 : ID_WORKER 全局唯一Id*</strong></p><p>分布式系统唯一Id生成：<a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></p><ul><li><strong>Twitter的snowflake算法</strong></li></ul><p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心（北京、香港···），5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。</p><ul><li>具体实现的代码可以参看<a href="https://github.com/twitter/snowflake%E3%80%82">https://github.com/twitter/snowflake。</a></li></ul><p>*<strong>主键自增：AUTO 我们需要配置主键自增*</strong></p><p><strong>我们需要配置主键自增</strong></p><ul><li>在实体类字段上配置<code>@TableId(type = IdType.AUTO)</code></li><li>数据库字段一定是自增</li></ul><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudy8a1f83fc-2839-49c8-a356-74e20572aeb1.png"><br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudy93306970-96cd-47c1-91c6-69fa318bfa2e.png" alt="![image-20211225165110346](C:\Users\渡\AppData\Roaming\Typora\typora-user-images\image-20211225165110346.png)" title="![image-20211225165110346](C:\Users\渡\AppData\Roaming\Typora\typora-user-images\image-20211225165110346.png)"><br><strong>手动输入：INPUT*</strong> 就需要自己写id</p><ul><li>在实体类字段上配置<code>@TableId(type = IdType.INPUT)</code><br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudybb1a933b-b7d7-4165-b655-4ca386b37daa.png"></li></ul><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//测试更新</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">2L</span>);<span class="comment">//怎么改id？？</span></span><br><span class="line">    <span class="comment">//通过条件自动拼接动态Sql</span></span><br><span class="line">    user.setName(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">12</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;root@qq.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.updateById(user);<span class="comment">//updateById，但是参数是个user</span></span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudy707abcb5-2325-4a33-b824-0798aa2559c8.png"></p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudyd5d5ed67-0d5d-45dd-ade2-87ba7e84a1b3.png"></p><h3 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h3><p>创建时间、更改时间！ 这些操作一般都是自动化完成，我们不希望手动更新</p><p>阿里巴巴开发手册︰几乎所有的表都要配置 gmt_create、gmt_modified ！而且需要自动化</p><blockquote><p>方式一：数据库级别（工作中不允许修改数据库级别）</p></blockquote><p>1、在表中增加字段：create_time,update_time</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudy624d739f-d5b3-43c4-a9fd-c2b9fbca4530.png"></p><p>2、再次测试插入或更新方法，我们需要在实体类中同步！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Date createTime;<span class="comment">//驼峰命名</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure><p>3、查看结果<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudy788732ec-d631-4946-af7e-4bad99fd3f66.png"></p><blockquote><p>方式二：代码级别</p></blockquote><p>1、删除数据库的默认值，更新操作！<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudyc6de3b50-4e0d-4893-ad89-06efb2acf3b1.png"></p><p>2、实体类字段属性上需要增加注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字段  字段添加填充内容</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span><span class="comment">//value = (&quot;create_time&quot;),</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure><p>3、编写处理器继承<code>MetaObjectHandler</code>来处理这个注解即可！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span><span class="comment">//日志</span></span><br><span class="line"><span class="meta">@Component</span><span class="comment">//丢到springboot里   一定不要忘记把处理器加到Ioc容器中!</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">extends</span> <span class="title class_">MetaObjectHandler</span> &#123;<span class="comment">//extends??</span></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//插入时的填充策略</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;==start insert ······==&quot;</span>);</span><br><span class="line">        <span class="comment">//setFieldValByName(java.lang.String fieldName, java.lang.Object fieldVal, org.apache.ibatis.reflection.MetaObject metaObject)</span></span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createTIme&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);<span class="comment">//插入时间</span></span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);<span class="comment">//更新时间</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//更新时的填充策略</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;==start update ······==&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);<span class="comment">//更新时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、测试插入&#x2F;更新，观察时间</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//测试插入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;live&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">22</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;1314@qq.com&quot;</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insert(user); <span class="comment">//会帮我们自动生成id</span></span><br><span class="line">    System.out.println(result); <span class="comment">//受影响的行数</span></span><br><span class="line">    System.out.println(user); <span class="comment">//通过日志发现id会自动回填</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span><span class="comment">//测试更新</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">1359495921613004803L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>); <span class="comment">//通过条件自动拼接动态Sql</span></span><br><span class="line">    user.setEmail(<span class="string">&quot;test3@qq.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.updateById(user);<span class="comment">//updateById，但是参数是个user</span></span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudybf6abf06-fbcf-403b-beb2-64ff0154da22.png"></p><h3 id="乐观锁-amp-悲观锁"><a href="#乐观锁-amp-悲观锁" class="headerlink" title="乐观锁&amp;悲观锁"></a>乐观锁&amp;悲观锁</h3><p>在面试过程中经常被问到乐观锁&#x2F;悲观锁，这个其实很简单</p><blockquote><p>乐观锁：顾名思义十分乐观,他总是认为不会出现问题,无论干什么都不上锁!如果出现了问题,再次更新值测试</p><p>悲观锁：顾名思义十分悲观,他总是认为出现问题,无论干什么都会上锁!再去操作!</p></blockquote><p>我们这里主要讲解 乐观锁机制!</p><p>乐观锁实现方式:</p><ul><li>取出记录时,获取当前version</li><li>更新时,带上这个version</li><li>执行更新时,set version &#x3D; newVersion where version &#x3D; oldVersion</li><li>如果version不对,就更新失败</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">乐观锁：先查询，获得版本号</span><br><span class="line">-- A</span><br><span class="line">update user set name = &quot;wsk&quot;,version = version+1 </span><br><span class="line">where id = 1 and version = 1</span><br><span class="line">-- B  （B线程抢先完成，此时version=2，会导致A线程修改失败！）</span><br><span class="line">update user set name = &quot;wsk&quot;,version = version+1 </span><br><span class="line">where id = 1 and version = 1</span><br></pre></td></tr></table></figure><blockquote><p>测试一下Mybatis-Plus乐观锁插件</p></blockquote><p>1、给数据库中增加version字段<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudy0a3bcefb-7d85-40d1-b75b-208dda2d4c92.png"></p><p>2、实体类加对应的字段</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span><span class="comment">//乐观锁version注解</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure><p>3、注册组件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//扫描mapper文件夹</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.wsk.mapper&quot;)</span><span class="comment">//交给mybatis做的，可以让这个配置类做扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span><span class="comment">//自动管理事务</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="comment">//注册乐观锁插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OptimisticLockerInterceptor <span class="title function_">optimisticLockerInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OptimisticLockerInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、测试一下</p><ul><li>成功</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//测试乐观锁成功</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOptimisticLocker1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1、查询用户信息</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    <span class="comment">//2、修改用户信息</span></span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;110@qq.com&quot;</span>);</span><br><span class="line">    <span class="comment">//3、执行更新操作</span></span><br><span class="line">    userMapper.updateById(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudyf4d3aa17-bf5b-4919-a19b-e2787802ea91.png"></p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudyc278e6ee-479a-463e-ab3b-007258ab2d3a.png"></p><ul><li>失败</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//乐观锁测试更新数据失败案例</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MybatisPlusInterceptorTest2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//模拟多线程，线程1</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1474657524027092993L</span>);</span><br><span class="line">user1.setName(<span class="string">&quot;测试0&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程2，模拟此时线程1还没有完成查询操作时被线程2抢占</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1474657524027092993L</span>);</span><br><span class="line">user2.setName(<span class="string">&quot;测试1&quot;</span>);</span><br><span class="line"><span class="comment">//此时线程2抢先线程1执行更新操作将会失败，数据不会变更</span></span><br><span class="line">userMapper.updateById(user2);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//自旋锁来多次尝试提交！</span></span><br><span class="line">userMapper.updateById(user1);<span class="comment">//如果没有乐观锁就会覆盖插队线程的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudy8b71c55d-2902-400b-b328-36327ccec305.png"></p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudyba129cc3-5701-477e-9f56-c2cab9f2030c.png"></p><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><ul><li>通过id查询单个用户</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//通过id查询单个用户</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过id查询多个用户</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//通过id查询多个用户</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectBatchIds</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>));</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">    <span class="comment">//System.out.println(users);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>按条件查询多个用户,通过map封装</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//通过条件查询之一  map</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMap</span><span class="params">()</span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//自定义要查询的</span></span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;www&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>分页在网站的使用十分之多！</p><p>1、原始的limit分页</p><p>2、pageHelper第三方插件</p><p>3、MybatisPlus其实也内置了分页插件！</p><p>1、配置拦截器组件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.H2));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2、直接使用page对象即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span><span class="comment">//测试分页查询</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//参数一current：当前页   参数二size：页面大小</span></span><br><span class="line">    <span class="comment">//使用了分页插件之后，所有的分页操作都变得简单了</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">    userMapper.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">    page.getRecords().forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数==&gt;&quot;</span>+page.getTotal());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudyf4b59842-0c11-4458-b7f3-f795f7c0c59d.png"></p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><blockquote><p>基本的删除任务：</p></blockquote><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudy95e283c4-4633-4411-a4ba-2917167a89ab.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteTest</span><span class="params">()</span> &#123;</span><br><span class="line">userMapper.deleteById(<span class="number">1474657524027092993L</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//批量删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">()</span> &#123;</span><br><span class="line">userMapper.deleteBatchIds(Arrays.asList(<span class="number">1474661936950796290L</span>, <span class="number">1474661936950796291L</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过map删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByMap</span><span class="params">()</span> &#123;</span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;1474661936950796292&quot;</span>);</span><br><span class="line">userMapper.deleteByMap(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><blockquote><p>物理删除：从数据库中直接删除</p><p>逻辑删除：在数据库中没有被删除，而是通过一个变量来使他失效！ deleted&#x3D;0 &#x3D;&#x3D;&gt; deleted&#x3D;1</p></blockquote><p><strong>管理员可以查看被删除的记录！防止数据的丢失，类似于回收站！</strong></p><p>*<strong>测试一下：*</strong></p><blockquote><p>1、在数据表中增加一个deleted字段</p></blockquote><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudy5d21fdce-da12-42e4-8513-cc6839edbce2.png"></p><p>2、实体类中添加对应属性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span><span class="comment">//逻辑删除注解</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure><p>3、配置！&#x3D;&#x3D;由于mybatis-plus官网更新原因，最新配置可以去官网查看&#x3D;&#x3D;</p><ul><li>配置application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span> <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure><p>4、测试一下删除</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudyc0ad8e44-da12-4a8f-9ad7-39229abcbdd0.png"></p><p>发现： 记录还在，deleted变为1</p><p>再次测试查询被删除的用户，发现查询为空</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/01/kuangstudyd072bd93-9826-4b37-9754-78e9b09fc480.png"></p><h2 id="性能分析插件"><a href="#性能分析插件" class="headerlink" title="性能分析插件"></a>性能分析插件</h2><p><strong>推荐使用druid自带的SQL监控</strong></p><h2 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器*"></a>条件构造器*</h2><h3 id="复杂条件查询"><a href="#复杂条件查询" class="headerlink" title="复杂条件查询"></a>复杂条件查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.joker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.joker.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.joker.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> JokerKS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/12/25 20:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperTest</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多条件查询1，查询姓名、邮箱不为空且年龄大于等于12的数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">WrapperTest1</span><span class="params">()</span> &#123;</span><br><span class="line">QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">wrapper</span><br><span class="line">.isNotNull(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">.isNotNull(<span class="string">&quot;email&quot;</span>)</span><br><span class="line">.ge(<span class="string">&quot;age&quot;</span>, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">userMapper.selectList(wrapper).forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//条件查询,查询姓名为Jack的数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">WrapperTest2</span><span class="params">()</span> &#123;</span><br><span class="line">QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">wrapper</span><br><span class="line">.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(wrapper);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//条件查询，查询age在20~30之间的</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">WrapperTest3</span><span class="params">()</span> &#123;</span><br><span class="line">QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">wrapper</span><br><span class="line">.between(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"><span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.selectCount(wrapper);</span><br><span class="line">System.out.println(<span class="string">&quot;age在20~30之间的有：&quot;</span> + count);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//条件查询，模糊查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">WrapperTest4</span><span class="params">()</span> &#123;</span><br><span class="line">QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">wrapper</span><br><span class="line">.notLike(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;J&quot;</span>)</span><br><span class="line">.likeRight(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;t&quot;</span>);</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(wrapper);</span><br><span class="line">maps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//条件查询，子查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">WrapperTest5</span><span class="params">()</span> &#123;</span><br><span class="line">QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">wrapper</span><br><span class="line">.inSql(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;select id from user where id&gt;3&quot;</span>);</span><br><span class="line">List&lt;Object&gt; list = userMapper.selectObjs(wrapper);</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//条件查询，排序</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">WrapperTest6</span><span class="params">()</span> &#123;</span><br><span class="line">QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">wrapper</span><br><span class="line">.orderByDesc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">List&lt;User&gt; userList = userMapper.selectList(wrapper);</span><br><span class="line">userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="代码自动生成器"><a href="#代码自动生成器" class="headerlink" title="代码自动生成器"></a>代码自动生成器</h2><p><code>AutoGenerator</code> 是 MyBatis-Plus 的代码生成器，通过 <code>AutoGenerator</code> 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p><ul><li>需要的依赖</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--模板引擎 依赖:mybatis-plus代码生成的时候报异常--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置ApiModel在实体类中不生效--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spring4all<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-swagger<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--freemarker--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--beetl--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ibeetl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>beetl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.joker;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.OutputFile;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码生成</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> JokerKS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/12/25 22:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JokerCode</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">List&lt;String&gt; tables = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">tables.add(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">FastAutoGenerator.create(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis_plus&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;admin123&quot;</span>)</span><br><span class="line">.globalConfig(builder -&gt; &#123;</span><br><span class="line">builder.author(<span class="string">&quot;Joker&quot;</span>)               <span class="comment">//作者</span></span><br><span class="line">.outputDir(System.getProperty(<span class="string">&quot;user.dir&quot;</span>)+<span class="string">&quot;\\src\\main\\java&quot;</span>)    <span class="comment">//输出路径(写到java目录)</span></span><br><span class="line">.enableSwagger()           <span class="comment">//开启swagger</span></span><br><span class="line">.commentDate(<span class="string">&quot;yyyy-MM-dd&quot;</span>)</span><br><span class="line">.fileOverride();            <span class="comment">//开启覆盖之前生成的文件</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">.packageConfig(builder -&gt; &#123;</span><br><span class="line">builder.parent(<span class="string">&quot;com.joker.xp&quot;</span>)<span class="comment">//生成到的目录，下面是各个模块</span></span><br><span class="line">.moduleName(<span class="string">&quot;practice&quot;</span>)</span><br><span class="line">.entity(<span class="string">&quot;entity&quot;</span>)</span><br><span class="line">.service(<span class="string">&quot;service&quot;</span>)</span><br><span class="line">.serviceImpl(<span class="string">&quot;serviceImpl&quot;</span>)</span><br><span class="line">.controller(<span class="string">&quot;controller&quot;</span>)</span><br><span class="line">.mapper(<span class="string">&quot;mapper&quot;</span>)</span><br><span class="line">.xml(<span class="string">&quot;mapper&quot;</span>)</span><br><span class="line">.pathInfo(Collections.singletonMap(OutputFile.mapperXml,System.getProperty(<span class="string">&quot;user.dir&quot;</span>)+<span class="string">&quot;\\src\\main\\resources\\mapper&quot;</span>));</span><br><span class="line">&#125;)</span><br><span class="line">.strategyConfig(builder -&gt; &#123;</span><br><span class="line">builder.addInclude(tables)</span><br><span class="line">.addTablePrefix(<span class="string">&quot;p_&quot;</span>)</span><br><span class="line">.serviceBuilder()</span><br><span class="line">.formatServiceFileName(<span class="string">&quot;%sService&quot;</span>)</span><br><span class="line">.formatServiceImplFileName(<span class="string">&quot;%sServiceImpl&quot;</span>)</span><br><span class="line">.entityBuilder()</span><br><span class="line">.enableLombok()</span><br><span class="line">.logicDeleteColumnName(<span class="string">&quot;deleted&quot;</span>)</span><br><span class="line">.enableTableFieldAnnotation()</span><br><span class="line">.controllerBuilder()</span><br><span class="line">.formatFileName(<span class="string">&quot;%sController&quot;</span>)</span><br><span class="line">.enableRestStyle()</span><br><span class="line">.mapperBuilder()</span><br><span class="line">.superClass(BaseMapper.class)</span><br><span class="line">.formatMapperFileName(<span class="string">&quot;%sMapper&quot;</span>)</span><br><span class="line">.enableMapperAnnotation()</span><br><span class="line">.formatXmlFileName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>()) <span class="comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">.execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch学习笔记</title>
      <link href="/2022/02/17/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/02/17/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>一、ElasticSearch概述</p><p>Elaticsearch，简称为es，es是一个开源的高扩展的&#x3D;&#x3D;分布式全文检索引擎&#x3D;&#x3D;，它可以近乎&#x3D;&#x3D;实时的存储、检索数据&#x3D;&#x3D;;本身扩展性很好，可以扩展到上百台服务器，处理PB级别(大数据时代）的数据。es也使用java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是 通过简单的&#x3D;&#x3D;RESTful API&#x3D;&#x3D;来隐藏Lucene的复杂性，从而让全文搜索变得简单 。</p><p>据国际权威的数据库产品评测机构DB Engines的统计，在2016年1月，ElasticSearch已超过Solr等，成为排名第一的搜索引擎类应用。</p><p><strong>历史</strong></p><p>多年前，一个叫做Shay Banon的刚结婚不久的失业开发者，由于妻子要去伦敦学习厨师，他便跟着也去了。在他找工作的过程中，为了给妻子构建一个食谱的搜索引擎，他开始构建一个早期版本的Lucene。</p><p>直接基于Lucene工作会比较困难，所以Shay开始抽象Lucene代码以便lava程序员可以在应用中添加搜索功能。他发布了他的第一个开源项目，叫做“Compass”。</p><p>后来Shay找到一份工作，这份工作处在高性能和内存数据网格的分布式环境中，因此高性能的、实时的、分布式的搜索引擎也是理所当然需要的。然后他决定重写Compass库使其成为一个独立的服务叫做&#x3D;&#x3D;Elasticsearch&#x3D;&#x3D;。</p><p>第一个公开版本出现在2010年2月，在那之后Elasticsearch已经成为Github上最受欢迎的项目之一，代码贡献者超过300人。一家主营Elasticsearch的公司就此成立，他们一边提供商业支持一边开发新功能，不过Elasticsearch将永远开源且对所有人可用。</p><p>Shay的妻子依旧等待着她的食谱搜索……</p><p><strong>谁在使用：</strong></p><p>1、维基百科，类似百度百科，全文检索，高亮，搜索推荐&#x2F;2（权重，百度！）</p><p>2、The Guardian (国外新闻网站) ，类似搜狐新闻，用户行为日志(点击，浏览，收藏，评论) +社交网络数据(对某某新闻的相关看法) ，数据分析，给到每篇新闻文章的作者，让他知道他的文章的公众反馈(好，坏，热门，垃圾，鄙视，崇拜)</p><p>3、Stack Overflow (国外的程序异常讨论论坛) ，，IT问题，程序的报错，提交上去，有人会跟你讨论和回答，全文检索，搜索相关问题和答案，程序报错了，就会将报错信息粘贴到里面去，搜索有没有对应的答案</p><p>4、GitHub (开源代码管理)，搜索 上千亿行代码</p><p>5、电商网站，检索商品</p><p>6、日志数据分析，logstash采集日志，ES进行复杂的数据分析，&#x3D;&#x3D;ELK技术，elasticsearch+logstash+kibana&#x3D;&#x3D;</p><p>7、商品价格监控网站，用户设定某商品的价格阈值，当低于该阈值的时候，发送通知消息给用户，比如说订阅牙膏的监控，如果高露洁牙膏的家庭套装低于50块钱，就通知我，我就去买</p><p>8、BI系统，商业智能， Business Intelligence。比如说有个大型商场集团，BI ，分析一下某某区域最近3年的用户消费 金额的趋势以及用户群体的组成构成，产出相关的数张报表， **区，最近3年，每年消费金额呈现100%的增长，而且用户群体85%是高级白领，开一个新商场。ES执行数据分析和挖掘， Kibana进行数据可视化</p><p>9、国内:站内搜索(电商，招聘，门户，等等)，IT系统搜索(OA，CRM，ERP，等等)，数据分析(ES热门的一一个使用场景)</p><p>ES和 solr 的差别</p><h3 id="1、ElasticSearch简介"><a href="#1、ElasticSearch简介" class="headerlink" title="1、ElasticSearch简介"></a>1、ElasticSearch简介</h3><p>Elasticsearch是一个实时分布式搜索和分析引擎。 它让你以前所未有的速度处理大数据成为可能。</p><p>它用于 <strong>全文搜索</strong>、<strong>结构化搜索</strong>、<strong>分析</strong>以及将这三者混合使用:</p><p>维基百科使用Elasticsearch提供全文搜索并高亮关键字，以及输入实时搜索(search-asyou-type)和搜索纠错(did-you-mean)等搜索建议功能。</p><p>英国卫报使用Elasticsearch结合用户日志和社交网络数据提供给他们的编辑以实时的反馈，以便及时了解公众对新发表的文章的回应。</p><p>StackOverflow结合全文搜索与地理位置查询，以及more-like-this功能来找到相关的问题和答案。</p><p>Github使用Elasticsearch检索1300亿行的代码。</p><p>但是Elasticsearch不仅用于大型企业，它还让像DataDog以及Klout这样的创业公司将最初的想法变成可扩展的解决方案。</p><p>Elasticsearch可以在你的笔记本上运行，也可以在数以百计的服务器上处理PB级别的数据。</p><p>Elasticsearch是一个基于Apache Lucene™的开源搜索引擎。无论在开源还是专有领域， Lucene可被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。</p><p>但是， Lucene只是一个库。 想要使用它，你必须使用Java来作为开发语言并将其直接集成到你的应用中，更糟糕的是， Lucene非常复杂，你需要深入了解检索的相关知识来理解它是如何工作的。</p><p>Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p><h3 id="2、Solr简介"><a href="#2、Solr简介" class="headerlink" title="2、Solr简介"></a>2、Solr简介</h3><p>Solr是Apache下的一个顶级开源项目，采用Java开发，它是基于Lucene的全文搜索服务器。Solr提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化</p><p>Solr可以独立运行，运行在letty. Tomcat等这些Selrvlet容器中 ， Solr 索引的实现方法很简单，&#x3D;&#x3D;用POST方法向Solr服务器发送一个描述Field及其内容的XML文档， Solr根据xml文档添加、删除、更新索引&#x3D;&#x3D;。Solr 搜索只需要发送HTTP GET请求，然后对Solr返回xml、&#x3D;&#x3D;json&#x3D;&#x3D;等格式的查询结果进行解析，组织页面布局。</p><p>Solr不提供构建UI的功能， Solr提供了一个管理界面，通过管理界面可以查询Solr的配置和运行情况。</p><p>solr是基于lucene开发企业级搜索服务器，实际上就是封装了lucene.</p><p>Solr是一个独立的企业级搜索应用服务器，它对外提供类似于Web-service的API接口。用户可以通过http请求，向搜索引擎服务器提交-定格式的文件，生成索引;也可以通过提出查找请求，并得到返回结果。</p><h3 id="3、Lucene简介"><a href="#3、Lucene简介" class="headerlink" title="3、Lucene简介"></a>3、Lucene简介</h3><p>Lucene是apache软件基金会4 jakarta项目组的一个子项目，是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎（英文与德文两种西方语言)。Lucene的目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者是以此为基础建立起完整的全文检索引擎。Lucene是一套用于全文检索和搜寻的开源程式库，由Apache软件基金会支持和提供。Lucene提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在Java开发环境里Lucene是一个成熟的免费开源工具。就其本身而言，Lucene是当前以及最近几年最受欢迎的免费java信息检索程序库。人们经常提到信息检索程序库，虽然与搜索引擎有关，但不应该将信息检索程序库与搜索引擎相混淆。</p><p>Lucene是一个全文检索引擎的架构。那什么是全文搜索引擎?</p><p>全文搜索引擎是名副其实的搜索引擎，国外具代表性的有Google、Fast&#x2F;AllTheWeb、AltaVista、Inktomi、Teoma、WiseNut等，国内著名的有百度(Baidu )。它们都是通过从互联网上提取的各个网站的信息（以网页文字为主)而建立的数据库中，检索与用户查询条件匹配的相关记录，然后按一定的排列顺序将结果返回给用户，因此他们是真正的搜索引擎。</p><p>从搜索结果来源的角度，全文搜索引擎又可细分为两种，一种是拥有自己的检索程序( Indexer )，俗称”蜘蛛” ( Spider )程序或”机器人” ( Robot )程序，并自建网页数据库，搜索结果直接从自身的数据库中调用，如上面提到的7家引擎;另一种则是租用其他引擎的数据库，并按自定的格式排列搜索结果，如Lycos引擎。</p><h3 id="4、ElasticSearch与Solr比较"><a href="#4、ElasticSearch与Solr比较" class="headerlink" title="4、ElasticSearch与Solr比较"></a>4、ElasticSearch与Solr比较</h3><ol><li>当单纯的对已有数据进行搜索时，Solr更快</li></ol><p><img src="https://img-blog.csdnimg.cn/4ed7fbf84abc493a953c6aa904b22871.png" alt="在这里插入图片描述"></p><ol><li>当实时建立索引时，Solr会产生io阻塞，查询性能较差，ElasticSearch具有明显的优势</li></ol><p><img src="https://img-blog.csdnimg.cn/cd3535ed806a455690175d4f8448b70c.png" alt="在这里插入图片描述"></p><ol><li>随着数据量的增加，Solr的搜索效率会变得更低，而ElasticSearch却没有明显的变化</li></ol><p><img src="https://img-blog.csdnimg.cn/a19f9641e2a6465d880c97d87d87428e.png" alt="在这里插入图片描述"></p><ol><li>转变我们的搜索基础设施后从Solr ElasticSearch，我们看见一个即时~ 50x提高搜索性能！</li></ol><p><img src="https://img-blog.csdnimg.cn/11f760cafd204a48a4a119014b4fee8a.png" alt="加粗样式"></p><p><strong>ElasticSearch vs Solr 总结</strong></p><p>1、es基本是开箱即用(解压就可以用!) ，非常简单。Solr安装略微复杂一丢丢!</p><p>2、Solr 利用Zookeeper进行分布式管理，而Elasticsearch 自身带有分布式协调管理功能 。</p><p>3、Solr 支持更多格式的数据，比如JSON、XML、 CSV ，而Elasticsearch仅支持json文件格式。</p><p>4、Solr 官方提供的功能更多，而Elasticsearch本身更注重于核心功能，高级功能多有第三方插件提供，例如图形化界面需要kibana友好支撑</p><p>5、 Solr 查询快，但更新索引时慢(即插入删除慢) ，用于电商等查询多的应用;</p><ul><li>ES建立索引快(即查询慢) ，即实时性查询快，用于facebook新浪等搜索。</li><li>Solr是传统搜索应用的有力解决方案，但Elasticsearch更适用于新兴的实时搜索应用。</li></ul><p>6、Solr比较成熟，有一个更大，更成熟的用户、开发和贡献者社区，而Elasticsearch相对开发维护者较少，更新太快，学习使用成本较高。</p><h2 id="二、ElasticSearch安装"><a href="#二、ElasticSearch安装" class="headerlink" title="二、ElasticSearch安装"></a>二、ElasticSearch安装</h2><p>官网：<a href="https://www.elastic.co/cn/elasticsearch/">https://www.elastic.co/cn/elasticsearch/</a></p><p>JDK8，最低要求</p><p>使用Java开发，必须保证ElasticSearch的版本与Java的核心jar包版本对应！（Java环境保证没错）</p><p><img src="https://img-blog.csdnimg.cn/5ae25fde652d4503917683b50a1503f3.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/f7b41243553a4d47b64c60f1df01e8ad.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><p>历史版本下载：<a href="https://www.elastic.co/cn/downloads/past-releases/">https://www.elastic.co/cn/downloads/past-releases/</a></p><p>官网下载巨慢，可以使用华为云镜像</p><ul><li>ElasticSearch: <a href="https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D">https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D</a></li><li>logstash: <a href="https://mirrors.huaweicloud.com/logstash/?C=N&amp;O=D">https://mirrors.huaweicloud.com/logstash/?C=N&amp;O=D</a></li><li>kibana: <a href="https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D">https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D</a></li><li>elasticsearch-analysis-ik: <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></li><li>cerebro: <a href="https://github.com/lmenezes/cerebro/releases">https://github.com/lmenezes/cerebro/releases</a></li></ul><h3 id="2-1、Windows下安装"><a href="#2-1、Windows下安装" class="headerlink" title="2.1、Windows下安装"></a>2.1、Windows下安装</h3><p>1、解压即可（尽量将ElasticSearch相关工具放在统一目录下）</p><p><img src="https://img-blog.csdnimg.cn/4f4c3861f146402bbd62b4639813ec76.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>2、熟悉目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin    启动文件</span><br><span class="line">config 配置文件目录</span><br><span class="line">    1og4j2 日志配置文件</span><br><span class="line">    jvm.options java虚拟机相关的配置(默认启动占1g内存，内容不够需要自己调整)</span><br><span class="line">    elasticsearch.yml elasticsearch的配置文件! 默认9200端口!跨域!</span><br><span class="line">1ib  相关jar包</span><br><span class="line">modules 功能模块目录</span><br><span class="line">plugins 插件目录 ik分词器</span><br></pre></td></tr></table></figure><p>3、启动</p><blockquote><p>一定要检查自己的java环境是否配置好</p></blockquote><p><img src="https://img-blog.csdnimg.cn/80752baa4aa84e1e83f30409447b8cf1.png" alt="在这里插入图片描述"></p><p>双击启动</p><blockquote><p>注意：如果启动后闪退，可能是文件目录有中午或者空格造成的</p></blockquote><p><img src="https://img-blog.csdnimg.cn/be1942c768854ec39a36715383d4f6df.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>访问 <a href="http://127.0.0.1:9200/">http://127.0.0.1:9200/</a></p><p><img src="https://img-blog.csdnimg.cn/2948347855074b89a0e34be5777f9a04.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="2-2、安装可视化界面"><a href="#2-2、安装可视化界面" class="headerlink" title="2.2、安装可视化界面"></a>2.2、安装可视化界面</h3><p>elasticsearch-head</p><p><strong>使用前提</strong>：需要安装nodejs</p><p>下载地址：<a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a></p><p><img src="https://img-blog.csdnimg.cn/b976add50915495a883b201b99596d62.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>安装依赖 <code>npm install</code></p><p>运行 <code>npm start</code></p><p>访问 <a href="http://localhost:9100/">http://localhost:9100/</a></p><p><img src="https://img-blog.csdnimg.cn/c73b892a47304fb49ded0d7fa4e5513e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>发现存在跨域问题</p><p><strong>开启跨域（在elasticsearch解压目录config下elasticsearch.yml中添加）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启跨域</span><br><span class="line">http.cors.enabled: true</span><br><span class="line"># 所有人访问</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure><p>注意配置文件中不要带注释，可能会闪退</p><p>重启elasticsearch</p><p><img src="https://img-blog.csdnimg.cn/31104ac0c70d485fb98563ccf7eef84a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>创建一个索引</p><p><img src="https://img-blog.csdnimg.cn/ce525553a4984849972493e776963f2f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/666cb2e8ccfe49cfa6bf20b2c9a0f6b8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/8485dda55a73436aabcf62feba27c0c8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/9b86f0d4be42419191732c9e768d21ed.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><strong>如何理解：</strong></p><ul><li>如果你是初学者<ul><li>索引 可以看做 “数据库”</li><li>类型 可以看做 “表”</li><li>文档 可以看做 “库中的数据（表中的行）”</li></ul></li></ul><p>这个head，我们只是把它当做可视化数据展示工具，之后所有的查询都在kibana中进行</p><ul><li>因为不支持json格式化，不方便</li></ul><h3 id="2-3、了解ELK"><a href="#2-3、了解ELK" class="headerlink" title="2.3、了解ELK"></a>2.3、了解ELK</h3><p>ELK是Elasticsearch、Logstash、 Kibana三大开源框架首字母大写简称。市面上也被成为Elastic Stack。</p><p>其中Elasticsearch是一个基于Lucene、分布式、通过Restful方式进行交互的近实时搜索平台框架。</p><p>像类似百度、谷歌这种大数据全文搜索引擎的场景都可以使用Elasticsearch作为底层支持框架，可见Elasticsearch提供的搜索能力确实强大，市面上很多时候我们简称Elasticsearch为es。</p><p>Logstash是ELK的中央数据流引擎，用于从不同目标(文件&#x2F;数据存储&#x2F;MQ )收集的不同格式数据，经过过滤后支持输出到不同目的地(文件&#x2F;MQ&#x2F;redis&#x2F;elasticsearch&#x2F;kafka等)。</p><p>Kibana可以将elasticsearch的数据通过友好的页面展示出来 ，提供实时分析的功能。</p><p>市面上很多开发只要提到ELK能够一致说出它是一个日志分析架构技术栈总称 ，但实际上ELK不仅仅适用于日志分析，它还可以支持其它任何数据分析和收集的场景，日志分析和收集只是更具有代表性。并非唯一性。</p><p>收集清洗数据(Logstash) &#x3D;&#x3D;&gt; 搜索、存储(ElasticSearch) &#x3D;&#x3D;&gt; 展示(Kibana)</p><p><img src="https://img-blog.csdnimg.cn/c60a6816e5cb4128bce48331063dc414.png" alt="在这里插入图片描述"></p><h3 id="2-4、安装kibana"><a href="#2-4、安装kibana" class="headerlink" title="2.4、安装kibana"></a>2.4、安装kibana</h3><p>Kibana是一个针对ElasticSearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。使用Kibana ，可以通过各种图表进行高级数据分析及展示。Kibana让海量数据更容易理解。它操作简单，基于浏览器的用户界面可以快速创建仪表板( dashboard )实时显示Elasticsearch查询动态。设置Kibana非常简单。无需编码或者额外的基础架构，几分钟内就可以完成Kibana安装并启动Elasticsearch索引监测。</p><p>官网：<a href="https://www.elastic.co/cn/kibana/">https://www.elastic.co/cn/kibana/</a></p><p><img src="https://img-blog.csdnimg.cn/b3a7d05d0bb4448e957947e4c856ca8d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>下载地址：<a href="https://www.elastic.co/cn/downloads/kibana">https://www.elastic.co/cn/downloads/kibana</a></p><p><img src="https://img-blog.csdnimg.cn/fd0844bf68a347878b69fe0c1bf9b25c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>&#x3D;&#x3D;版本需要与ElasticSearch版本对应&#x3D;&#x3D;</p><p>华为云镜像： <a href="https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D">https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D</a></p><p>安装</p><p>解压即可（尽量将ElasticSearch相关工具放在统一目录下）</p><p>访问 <a href="http://127.0.0.1:5601/">http://127.0.0.1:5601</a></p><p><img src="https://img-blog.csdnimg.cn/bd1980a003184f44b3fa2b35395d9e13.png" alt="在这里插入图片描述"></p><p>开发工具</p><p>（Postman、curl、head、谷歌浏览器插件）</p><p><img src="https://img-blog.csdnimg.cn/702849eaab964d6c9c2c702610cf0815.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>如果说，你在英文方面不太擅长，kibana是支持汉化的</p><p>kibana汉化</p><p>编辑器打开kibana解压目录&#x2F;config&#x2F;kibana.yml(kibana-7.13.1-windows-x86_64&#x2F;config&#x2F;kibana.yml)，添加</p><p><img src="https://img-blog.csdnimg.cn/0393d4d0fc164dc59dcfdbd209354e30.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>重启kibana</p><p>汉化成功</p><p><img src="https://img-blog.csdnimg.cn/784bbd78425d4dc78eab349eba69ee4d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="三、ElasticSearch核心概念"><a href="#三、ElasticSearch核心概念" class="headerlink" title="三、ElasticSearch核心概念"></a>三、ElasticSearch核心概念</h2><h3 id="3-1、概述"><a href="#3-1、概述" class="headerlink" title="3.1、概述"></a>3.1、概述</h3><p>集群，节点，索引，类型，文档，分片，映射是什么？</p><p>1、索引（ElasticSearch）</p><p>包多个分片</p><p>2、字段类型（映射）mapping</p><p>字段类型映射（字段是整型，还是字符型…）</p><p>3、文档（documents）</p><p>4、分片（Lucene索引，倒排索引）</p><p><strong>elasticsearch是面向文档，关系型数据库和elasticsearch客观的对比！一切都是json</strong>!</p><table><thead><tr><th>Relational DB</th><th>Elasticsearch</th></tr></thead><tbody><tr><td>数据库（database）</td><td>索引（indices）</td></tr><tr><td>表（tables）</td><td>types</td></tr><tr><td>行（rows）</td><td>documents</td></tr><tr><td>字段（columns）</td><td>fields</td></tr></tbody></table><p>elasticsearch（集群）中可以包含多个索引（数据库） ，每个索引中可以包含多个类型（表） ，每个类型下又包含多个文档（行） ，每个文档中又包含多个字段（列）。</p><p><img src="https://img-blog.csdnimg.cn/b4b6d49e705c431680358ecfdf601095.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><strong>物理设计：</strong></p><p>elasticsearch在后台把每个索引划分成多个分片。每个分片可以在集群中的不同服务器间迁移</p><p>一个人就是一个集群! ，即启动的ElasticSearch服务，默认就是一个集群，且默认集群名为elasticsearch</p><p><img src="https://img-blog.csdnimg.cn/f97a6ef1187f4ec0a7a78822a25f9f66.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><strong>逻辑设计：</strong></p><p>一个索引类型中，包含多个文档，比如说文档1，文档2。当我们索引一篇文档时，可以通过这样的一个顺序找到它：索引-&gt;类型-&gt;文档id，通过这个组合我们就能索引到某个具体的文档。注意：ID不必是整数，实际上它是一个字符串。</p><h3 id="3-2、文档"><a href="#3-2、文档" class="headerlink" title="3.2、文档"></a>3.2、文档</h3><p>文档（”行“）</p><p>就是我们的一条条的记录</p><p>之前说elasticsearch是面向文档的，那么就意味着索引和搜索数据的最小单位是文档， elasticsearch中，文档有几个重要属性:</p><ul><li>自我包含， 一篇文档同时包含字段和对应的值，也就是同时包含key:value !</li><li>可以是层次型的，一个文档中包含自文档，复杂的逻辑实体就是这么来的! {就是一 个json对象! fastjson进行自动转换！}</li><li>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用，在elasticsearch中，对于字段是非常灵活的，有时候，我们可以忽略该字段，或者动态的添加一个新的字段。</li></ul><p>尽管我们可以随意的新增或者忽略某个字段，但是，每个字段的类型非常重要，比如一一个年龄字段类型，可以是字符串也可以是整形。因为elasticsearch会保存字段和类型之间的映射及其他的设置。这种映射具体到每个映射的每种类型，这也是为什么在elasticsearch中，类型有时候也称为映射类型。</p><h3 id="3-3、类型"><a href="#3-3、类型" class="headerlink" title="3.3、类型"></a>3.3、类型</h3><p>类型（“表”）</p><p>类型是文档的逻辑容器，就像关系型数据库一样，表格是行的容器。类型中对于字段的定 义称为映射，比如name映射为字符串类型。我们说文档是无模式的 ，它们不需要拥有映射中所定义的所有字段，比如新增一个字段，那么elasticsearch是怎么做的呢?elasticsearch会自动的将新字段加入映射，但是这个字段的不确定它是什么类型， elasticsearch就开始猜，如果这个值是18 ，那么elasticsearch会认为它是整形。但是elasticsearch也可能猜不对 ，所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了，先定义好字段，然后再使用，别整什么幺蛾子。</p><h3 id="3-4、索引"><a href="#3-4、索引" class="headerlink" title="3.4、索引"></a>3.4、索引</h3><p>索引（“库”）</p><p>就是数据库!</p><p>索引是映射类型的容器， elasticsearch中的索引是一个非常大的文档集合。索|存储了映射类型的字段和其他设置。然后它们被存储到了各个分片上了。我们来研究下分片是如何工作的。</p><p>物理设计:节点和分片如何工作</p><p><img src="https://img-blog.csdnimg.cn/eaa177e252e843e792de6e8144596c29.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>一个集群至少有一 个节点，而一个节点就是一-个elasricsearch进程 ，节点可以有多个索引默认的，如果你创建索引，那么索引将会有个5个分片( primary shard ，又称主分片)构成的，每一个主分片会有-一个副本( replica shard ，又称复制分片）</p><p><img src="https://img-blog.csdnimg.cn/ed34371596c344cbada49df3105a9edf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>上图是一个有3个节点的集群，可以看到主分片和对应的复制分片都不会在同-个节点内，这样有利于某个节点挂掉了，数据也不至于丢失。实际上， 一个分片是- -个Lucene索引， 一个包含&#x3D;&#x3D;倒排索引&#x3D;&#x3D;的文件目录，倒排索引的结构使得elasticsearch在不扫描全部文档的情况下，就能告诉你哪些文档包含特定的关键字。不过，等等，倒排索引是什么鬼?</p><h3 id="3-5、倒排索引"><a href="#3-5、倒排索引" class="headerlink" title="3.5、倒排索引"></a>3.5、倒排索引</h3><p>elasticsearch使用的是一种称为倒排索引 |的结构，采用Lucene倒排索作为底层。这种结构适用于快速的全文搜索，一个索引由文档中所有不重复的列表构成，对于每一个词，都有一个包含它的文档列表。 例如，现在有两个文档，每个文档包含如下内容:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Study every day， good good up to forever  # 文档1包含的内容</span><br><span class="line">To forever， study every day，good good up  # 文档2包含的内容</span><br></pre></td></tr></table></figure><p>为为创建倒排索引，我们首先要将每个文档拆分成独立的词(或称为词条或者tokens) ，然后创建一一个包含所有不重 复的词条的排序列表，然后列出每个词条出现在哪个文档:</p><table><thead><tr><th>term</th><th>doc_1</th><th>doc_2</th></tr></thead><tbody><tr><td>Study</td><td>√</td><td>x</td></tr><tr><td>To</td><td>x</td><td>x</td></tr><tr><td>every</td><td>√</td><td>√</td></tr><tr><td>forever</td><td>√</td><td>√</td></tr><tr><td>day</td><td>√</td><td>√</td></tr><tr><td>study</td><td>x</td><td>√</td></tr><tr><td>good</td><td>√</td><td>√</td></tr><tr><td>every</td><td>√</td><td>√</td></tr><tr><td>to</td><td>√</td><td>x</td></tr><tr><td>up</td><td>√</td><td>√</td></tr></tbody></table><p>现在，我们试图搜索 to forever，只需要查看包含每个词条的文档</p><table><thead><tr><th>term</th><th>doc_1</th><th>doc_2</th></tr></thead><tbody><tr><td>to</td><td>√</td><td>x</td></tr><tr><td>forever</td><td>√</td><td>√</td></tr><tr><td>total</td><td>2</td><td>1</td></tr></tbody></table><p>两个文档都匹配，但是第一个文档比第二个匹配程度更高。如果没有别的条件，现在，这两个包含关键字的文档都将返回。</p><p>再来看一个示例，比如我们通过博客标签来搜索博客文章。那么倒排索引列表就是这样的一个结构:</p><p><img src="https://img-blog.csdnimg.cn/dd3138e456594fd29935bba97a751325.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>如果要搜索含有python标签的文章，那相对于查找所有原始数据而言，查找倒排索引后的数据将会快的多。只需要查看标签这一栏，然后获取相关的文章ID即可。完全过滤掉无关的所有数据，提高效率!</p><p>elasticsearch的索引和Lucene的索引对比</p><p>在elasticsearch中，索引(库)这个词被频繁使用，这就是术语的使用。在elasticsearch中 ，索引被分为多个分片，每份分片是-个Lucene的索引。所以一个elasticsearch索引是由多 个Lucene索引组成的。别问为什么，谁让elasticsearch使用Lucene作为底层呢!如无特指，说起索引都是指elasticsearch的索引。</p><p>接下来的一切操作都在kibana中Dev Tools下的Console里完成。基础操作!</p><h2 id="四、IK分词器-elasticsearch插件"><a href="#四、IK分词器-elasticsearch插件" class="headerlink" title="四、IK分词器(elasticsearch插件)"></a>四、IK分词器(elasticsearch插件)</h2><h3 id="4-1、IK分词器"><a href="#4-1、IK分词器" class="headerlink" title="4.1、IK分词器"></a>4.1、IK分词器</h3><p>中文分词器</p><p>分词：即把一段中文或者别的划分成一个个的关键字，我们在搜索时候会把自己的信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一一个匹配操作，默认的中文分词是将每个字看成一个词（不使用用IK分词器的情况下），比如“我爱狂神”会被分为”我”，”爱”，”狂”，”神” ，这显然是不符合要求的，所以我们需要安装中文分词器ik来解决这个问题。</p><p>IK提供了两个分词算法: (ik_smart和ik_max_word )，其中ik_smart为最少切分，ik_max_word为最细粒度划分!</p><p>1、下载</p><p>版本要与ElasticSearch版本对应</p><p>下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>2、安装</p><p>ik文件夹是自己创建的</p><p>解压放入到es对应的plugins下即可</p><p>3、重启观察ES，发现ik插件被加载了</p><p><img src="https://img-blog.csdnimg.cn/38b1d63421ab4382b3311fcb0d3895c0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>4、elasticsearch-plugin 可以通过这个命令来查看加载进来的插件</p><p><img src="https://img-blog.csdnimg.cn/38f19cf2eab64372a275ffabc24f48c7.png" alt="在这里插入图片描述"></p><p>5、使用kibana测试</p><p>查看不同的分词效果</p><p>ik_smart：最少切分</p><p><img src="https://img-blog.csdnimg.cn/3fde229f03a1473cb51f08b432c35fc6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>ik_max_word：最细粒度划分（穷尽词库的可能）</p><p><img src="https://img-blog.csdnimg.cn/4d73848123e84b208b4e40816b571650.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>我们输入超级喜欢狂神说java</p><p><img src="https://img-blog.csdnimg.cn/38aea40d916f438790ab9ca400181243.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>发现问题：狂神说被拆开了！</p><p>这种自己需要的词，需要自己加到我们的分词器的字典中！</p><p><strong>ik 分词器增加自己的配置</strong></p><p>添加自定义的词添加到扩展字典中</p><p>elasticsearch目录&#x2F;plugins&#x2F;ik&#x2F;config&#x2F;IKAnalyzer.cfg.xml</p><p>创建 <code>Joker.dic</code> 字典文件，添加字典内容</p><p><img src="C:\Users\渡\AppData\Roaming\Typora\typora-user-images\image-20220114153041116.png" alt="image-20220114153041116"></p><p>打开 IKAnalyzer.cfg.xml 文件，扩展字典</p><p><img src="https://img-blog.csdnimg.cn/8a9feed75ad24bb78327a1330655659b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>重启ElasticSearch，再次使用kibana测试</p><p><strong>测试kibana</strong></p><p><img src="https://img-blog.csdnimg.cn/ce04eb6b519d4c14a0801e2236985016.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>以后的话，我们需要自己配置分词就在自己定义的dic文件进行配置即可！</p><h2 id="五、Rest风格说明"><a href="#五、Rest风格说明" class="headerlink" title="五、Rest风格说明"></a>五、Rest风格说明</h2><p><strong>一种软件架构风格</strong>,而不是标准,只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以<strong>更简洁</strong>，<strong>更有层次</strong>，<strong>更易于实现缓存</strong>等机制。</p><h3 id="5-1、基本Rest命令说明："><a href="#5-1、基本Rest命令说明：" class="headerlink" title="5.1、基本Rest命令说明："></a>5.1、基本Rest命令说明：</h3><table><thead><tr><th>method</th><th>url地址</th><th>描述</th></tr></thead><tbody><tr><td>PUT（创建,修改）</td><td>localhost:9200&#x2F;索引名称&#x2F;类型名称&#x2F;文档id</td><td>创建文档（指定文档id）</td></tr><tr><td>POST（创建）</td><td>localhost:9200&#x2F;索引名称&#x2F;类型名称</td><td>创建文档（随机文档id）</td></tr><tr><td>POST（修改）</td><td>localhost:9200&#x2F;索引名称&#x2F;类型名称&#x2F;文档id&#x2F;_update</td><td>修改文档</td></tr><tr><td>DELETE（删除）</td><td>localhost:9200&#x2F;索引名称&#x2F;类型名称&#x2F;文档id</td><td>删除文档</td></tr><tr><td>GET（查询）</td><td>localhost:9200&#x2F;索引名称&#x2F;类型名称&#x2F;文档id</td><td>查询文档通过文档ID</td></tr><tr><td>POST（查询）</td><td>localhost:9200&#x2F;索引名称&#x2F;类型名称&#x2F;文档id&#x2F;_search</td><td>查询所有数据</td></tr></tbody></table><h3 id="5-2、关于索引的基本操作"><a href="#5-2、关于索引的基本操作" class="headerlink" title="5.2、关于索引的基本操作"></a>5.2、关于索引的基本操作</h3><p>1、创建一个索引，添加</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PUT /索引名/~类型名~/文档id</span><br><span class="line">&#123;请求体&#125;</span><br><span class="line"></span><br><span class="line">PUT /test1/type1/1</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot; : &quot;流柚&quot;,</span><br><span class="line">&quot;age&quot; : 18</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">返回结果</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">警告信息： 不支持在文档索引请求中的指定类型</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">而是使用无类型的断点(/&#123;index&#125;/_doc/&#123;<span class="built_in">id</span>&#125;, /&#123;index&#125;/_doc, or /&#123;index&#125;/_create/&#123;<span class="built_in">id</span>&#125;).</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;test1&quot;,    # 索引</span><br><span class="line">  &quot;_type&quot; : &quot;type1&quot;,    # 类型（已经废弃）</span><br><span class="line">  &quot;_id&quot; : &quot;1&quot;,            # id</span><br><span class="line">  &quot;_version&quot; : 1,        # 版本</span><br><span class="line">  &quot;result&quot; : &quot;created&quot;,    # 操作类型</span><br><span class="line">  &quot;_shards&quot; : &#123;            # 分片信息</span><br><span class="line">    &quot;total&quot; : 2,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_seq_no&quot; : 0,</span><br><span class="line">  &quot;_primary_term&quot; : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成了自动增加索引！数据也成功的添加了，这就是我说大家在初期可以把它当做数据库学习的原因！</p><p><img src="https://img-blog.csdnimg.cn/a1662e1682294fe8931f6c8f4b687389.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>2、字段数据类型</p><ul><li><p>字符串类型</p><p>text、keyword</p><ul><li>text：支持分词，全文检索,支持模糊、精确查询,不支持聚合,排序操作;text类型的最大支持的字符长度无限制,适合大字段存储；</li><li>keyword：不进行分词，直接索引、支持模糊、支持精确匹配，支持聚合、排序操作。keyword类型的最大支持的长度为——32766个UTF-8类型的字符,可以通过设置ignore_above指定自持字符长度，超过给定长度后的数据将不被索引，无法通过term精确匹配检索返回结果。</li></ul></li><li><p>数值型</p><p>long、Integer、short、byte、double、float、half float、scaled float</p></li><li><p>日期类型</p><p>date</p></li><li><p>te布尔类型</p><p>boolean</p></li><li><p>二进制类型</p><p>binary</p></li></ul><p>等等…</p><p>3、指定字段的类型（使用PUT）</p><p>创建规则 类似于建库（建立索引和字段对应类型），也可看做规则的建立</p><p><img src="https://img-blog.csdnimg.cn/970cd3944d8549fe883ce0e12b4c71f4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>4、获取规则</p><p>可以通过 GET 请求获取具体的信息</p><p><img src="https://img-blog.csdnimg.cn/9ce725800ca3465a8c34ffccd7d8bd2b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>5、查看默认信息</p><p><code>_doc</code> 默认类型（default type），type 在未来的版本中会逐渐弃用，因此产生一个默认类型进行代替</p><p><img src="https://img-blog.csdnimg.cn/4da91cb2d5df42bebac4fcb58f8b99f4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/19a9e6e92488420e83d34d77502d0472.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>如果自己的文档字段没有指定，那么es就会给我们默认配置字段类型！</p><p>扩展：通过命令 elasticsearch索引情况！通过<code>get _cat/</code> 可以获取ElasticSearch的当前的很多信息！</p><p><img src="https://img-blog.csdnimg.cn/981f1f82ba0244c8a063cca8ac0c5939.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/c63b3977ea4c4f4999c6582f8c8aba04.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>6、修改</p><p>两种方案</p><p>旧的（使用put覆盖原来的值）</p><p>版本+1（_version）</p><p><img src="https://img-blog.csdnimg.cn/a51c87dd6df847a4a1f5d477ddecebc6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>但是如果漏掉某个字段没有写，那么更新是没有写的字段 ，会消失</p><p>新的（使用post的update）</p><p><img src="https://img-blog.csdnimg.cn/d09be475ac2042079ba2c630ecd8c595.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>version不会改变</p><p>需要注意doc</p><p>不会丢失字段</p><p>7、删除</p><p>通过DELETE 命令实现删除，根据你的请求来判断是删除索引还是删除文档记录！</p><p>使用RESTFUL 风格是我们ES推荐大家使用的！</p><h3 id="5-3、关于文档的基本操作（重点）"><a href="#5-3、关于文档的基本操作（重点）" class="headerlink" title="5.3、关于文档的基本操作（重点）"></a>5.3、关于文档的基本操作（重点）</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p>1、添加数据</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PUT /Joker/user/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Joker&quot;,</span><br><span class="line">  &quot;age&quot;: 23,</span><br><span class="line">  &quot;desc&quot;: &quot;一顿操作猛如虎，一看工资2500&quot;,</span><br><span class="line">  &quot;tags&quot;: [&quot;运动&quot;,&quot;阳光&quot;,&quot;直男&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8dfa5df40a8b452eb658ed6ea52939ff.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PUT /kuangshen/user/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;张三&quot;,</span><br><span class="line">  &quot;age&quot;: 40,</span><br><span class="line">  &quot;desc&quot;: &quot;法外狂徒&quot;,</span><br><span class="line">  &quot;tags&quot;: [&quot;运动&quot;,&quot;旅游&quot;,&quot;渣男&quot;]</span><br><span class="line">&#125;</span><br><span class="line">PUT /kuangshen/user/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;李四&quot;,</span><br><span class="line">  &quot;age&quot;: 30,</span><br><span class="line">  &quot;desc&quot;: &quot;mmp,不知道 如何形容&quot;,</span><br><span class="line">  &quot;tags&quot;: [&quot;靓仔&quot;,&quot;旅游&quot;,&quot;唱歌&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、获取数据 GET</p><p><img src="https://img-blog.csdnimg.cn/0e50324e7c9d4073befc3e9c5b839f60.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>3、更新数据 PUT</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PUT /kuangshen/user/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;李四233&quot;,</span><br><span class="line">  &quot;age&quot;: 23,</span><br><span class="line">  &quot;desc&quot;: &quot;mmp,不知道 如何形容&quot;,</span><br><span class="line">  &quot;tags&quot;: [&quot;靓仔&quot;,&quot;旅游&quot;,&quot;唱歌&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e5007de387844be5bfce42147f181e11.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>4、Post _update，推荐使用这种更新方式！</p><p><img src="https://img-blog.csdnimg.cn/9e051316013f400891b1ffd5d4473408.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>简单的搜索</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET kuangshen/user/1</span><br></pre></td></tr></table></figure><p>简单的条件查询，可以根据默认的映射规则，产生基本的查询！</p><p><img src="https://img-blog.csdnimg.cn/0b0ea5fffae64c5099fc021f1924b7af.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>这边name是text 所以做了分词的查询 如果是keyword就不会分词搜索了</p><h4 id="复杂操作"><a href="#复杂操作" class="headerlink" title="复杂操作"></a>复杂操作</h4><p>复杂操作搜索 select（排序，分页，高亮，模糊查询，精准查询）</p><p><img src="https://img-blog.csdnimg.cn/a20e749f1863490d89cd3746c954a9de.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//测试只能一个字段查询</span><br><span class="line">GET lisen/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;李森&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果，不想要那么多，只展示列表中某些字段</p><p><img src="https://img-blog.csdnimg.cn/b7907b445a9a47598675e271890f7263.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>我们之后使用java操作es，所有的方法和对象就是这里面的key</p><p><strong>排序</strong></p><p><img src="https://img-blog.csdnimg.cn/583539109f444b15a44de8ef0a527751.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><strong>分页</strong></p><p><img src="https://img-blog.csdnimg.cn/0ffa8f13a2d04d1c874e4cdf42b1168f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>数据下标还是从0开始的，和学的所有数据结构是一样的！</p><p><strong>多条件查询</strong></p><p>布尔值查询</p><p>must（and），所有的条件都要符合 where id&#x3D;1 and name &#x3D; xxx</p><p>should（or），所有的条件都要符合 where id&#x3D;1 or name &#x3D; xxx</p><p><img src="https://img-blog.csdnimg.cn/721a2b681384440ea87daee668eea7eb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>must_not（not）</p><p><strong>过滤器 filter</strong></p><p><img src="https://img-blog.csdnimg.cn/23a68a449b51445eba3a88e9b30eb97a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><ul><li>gt 大于</li><li>gte 大于等于</li><li>lte 小于</li><li>lte 小于等于</li></ul><p><strong>精确查询</strong></p><p>term查询是直接通过倒排索引指定的词条进程精确查找的</p><p>关于分词</p><ul><li>term，直接查询精确的</li><li>match，会使用分词器解析！（先分析文档，然后通过分析的文档进行查询）</li></ul><p>两个类型 text keyword</p><p><img src="https://img-blog.csdnimg.cn/3de24b19e77441c39c6b2eaf1df58f6f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><strong>多个值匹配精确查询</strong></p><p><strong>高亮</strong></p><p>还能自定义高亮的样式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//搜索高亮</span></span><br><span class="line"><span class="type">HighlightBuilder</span> <span class="variable">highlightBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>();</span><br><span class="line">highlightBuilder.field(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">highlightBuilder.requireFieldMatch(<span class="literal">false</span>);<span class="comment">//关闭多个高亮</span></span><br><span class="line">highlightBuilder.preTags(<span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>);<span class="comment">//自定义高亮样式</span></span><br><span class="line">highlightBuilder.postTags(<span class="string">&quot;&lt;/span&gt;&quot;</span>);</span><br><span class="line">sourceBuilder.highlighter(highlightBuilder);</span><br></pre></td></tr></table></figure><p>这些mysql也能做，只是效率比较低</p><ul><li>匹配</li><li>按条件匹配</li><li>精确匹配</li><li>区间范围匹配</li><li>匹配字段过滤</li><li>多条件查询</li><li>高亮查询</li></ul><h2 id="六、Springboot集成"><a href="#六、Springboot集成" class="headerlink" title="六、Springboot集成"></a>六、Springboot集成</h2><p>找官方文档</p><p><img src="https://img-blog.csdnimg.cn/03a46f66dbe7480182fcc45536f8b3e3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/19b99197625040c28a2f44f26feaa791.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/e186b75d68d14b41b62f8fa0e444e333.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="6-1、导入依赖"><a href="#6-1、导入依赖" class="headerlink" title="6.1、导入依赖"></a>6.1、导入依赖</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;dependency&gt;</span></span><br><span class="line">    <span class="attr">&lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span></span><br><span class="line">    <span class="attr">&lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="attr">&lt;version&gt;7.14.0&lt;/version&gt;</span></span><br><span class="line"><span class="attr">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><p>注意下spring-boot的parent包内的依赖的es的版本是不是你对应的版本</p><p>不是的话就在pom文件下写个properties的版本</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;!--这边配置下自己对应的版本--&gt;</span></span><br><span class="line"><span class="attr">&lt;properties&gt;</span></span><br><span class="line">    <span class="attr">&lt;java.version&gt;1.8&lt;/java.version&gt;</span></span><br><span class="line">    <span class="attr">&lt;elasticsearch.version&gt;7.14.0&lt;/elasticsearch.version&gt;</span></span><br><span class="line"><span class="attr">&lt;/properties&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2、找对象"><a href="#6-2、找对象" class="headerlink" title="6.2、找对象"></a>6.2、找对象</h3><p><img src="https://img-blog.csdnimg.cn/e3d293ae07494d09a4cec0c2fe18e7db.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="6-3、分析这个类中的方法"><a href="#6-3、分析这个类中的方法" class="headerlink" title="6.3、分析这个类中的方法"></a>6.3、分析这个类中的方法</h3><p>配置基本的项目</p><p>一定要保证我们导入的依赖和我们本地的es版本一致</p><p><img src="https://img-blog.csdnimg.cn/b0876b20083740afa52422eabb14462d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>新建配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、找对象</span></span><br><span class="line"><span class="comment">// 2、放到spring中待用</span></span><br><span class="line"><span class="comment">// 3、如果是springboot 就先分析源码</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticSearchClientConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestHighLevelClient <span class="title function_">restHighLevelClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">            RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>))</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5ffde15a8f0a4ca0a59a72508654579b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>虽然这里导入了3个类，都是静态内部类，核心类就一个</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure.elasticsearch;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.auth.AuthScope;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.auth.Credentials;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.auth.UsernamePasswordCredentials;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.config.RequestConfig.Builder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.BasicCredentialsProvider;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.nio.client.HttpAsyncClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.ObjectProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.PropertyMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;RestHighLevelClient.class&#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(&#123;RestClient.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;ElasticsearchRestClientProperties.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticsearchRestClientAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ElasticsearchRestClientAutoConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PropertiesCredentialsProvider</span> <span class="keyword">extends</span> <span class="title class_">BasicCredentialsProvider</span> &#123;</span><br><span class="line">        PropertiesCredentialsProvider(ElasticsearchRestClientProperties properties) &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasText(properties.getUsername())) &#123;</span><br><span class="line">                <span class="type">Credentials</span> <span class="variable">credentials</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordCredentials</span>(properties.getUsername(), properties.getPassword());</span><br><span class="line">                <span class="built_in">this</span>.setCredentials(AuthScope.ANY, credentials);</span><br><span class="line">            &#125;</span><br><span class="line">            properties.getUris().stream().map(<span class="built_in">this</span>::toUri).filter(<span class="built_in">this</span>::hasUserInfo).forEach(<span class="built_in">this</span>::addUserInfoCredentials);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> URI <span class="title function_">toUri</span><span class="params">(String uri)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> URI.create(uri);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException var3) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">hasUserInfo</span><span class="params">(URI uri)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> uri != <span class="literal">null</span> &amp;&amp; StringUtils.hasLength(uri.getUserInfo());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addUserInfoCredentials</span><span class="params">(URI uri)</span> &#123;</span><br><span class="line">            <span class="type">AuthScope</span> <span class="variable">authScope</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthScope</span>(uri.getHost(), uri.getPort());</span><br><span class="line">            <span class="type">Credentials</span> <span class="variable">credentials</span> <span class="operator">=</span> <span class="built_in">this</span>.createUserInfoCredentials(uri.getUserInfo());</span><br><span class="line">            <span class="built_in">this</span>.setCredentials(authScope, credentials);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> Credentials <span class="title function_">createUserInfoCredentials</span><span class="params">(String userInfo)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">delimiter</span> <span class="operator">=</span> userInfo.indexOf(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (delimiter == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordCredentials</span>(userInfo, (String)<span class="literal">null</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> userInfo.substring(<span class="number">0</span>, delimiter);</span><br><span class="line">                <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> userInfo.substring(delimiter + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordCredentials</span>(username, password);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DefaultRestClientBuilderCustomizer</span> <span class="keyword">implements</span> <span class="title class_">RestClientBuilderCustomizer</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">PropertyMapper</span> <span class="variable">map</span> <span class="operator">=</span> PropertyMapper.get();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ElasticsearchRestClientProperties properties;</span><br><span class="line">        DefaultRestClientBuilderCustomizer(ElasticsearchRestClientProperties properties) &#123;</span><br><span class="line">            <span class="built_in">this</span>.properties = properties;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(RestClientBuilder builder)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(HttpAsyncClientBuilder builder)</span> &#123;</span><br><span class="line">            builder.setDefaultCredentialsProvider(<span class="keyword">new</span> <span class="title class_">ElasticsearchRestClientAutoConfiguration</span>.PropertiesCredentialsProvider(<span class="built_in">this</span>.properties));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">            <span class="type">PropertyMapper</span> <span class="variable">var10000</span> <span class="operator">=</span> map;</span><br><span class="line">            <span class="type">ElasticsearchRestClientProperties</span> <span class="variable">var10001</span> <span class="operator">=</span> <span class="built_in">this</span>.properties;</span><br><span class="line">            var10001.getClass();</span><br><span class="line">            var10000.from(var10001::getConnectionTimeout).whenNonNull().asInt(Duration::toMillis).to(builder::setConnectTimeout);</span><br><span class="line">            var10000 = map;</span><br><span class="line">            var10001 = <span class="built_in">this</span>.properties;</span><br><span class="line">            var10001.getClass();</span><br><span class="line">            var10000.from(var10001::getReadTimeout).whenNonNull().asInt(Duration::toMillis).to(builder::setSocketTimeout);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">        proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(&#123;RestHighLevelClient.class&#125;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RestHighLevelClientConfiguration</span> &#123;</span><br><span class="line">        RestHighLevelClientConfiguration() &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// RestHighLevelClient 高级客户端，也是我们这里要讲，后面项目会用到客户端</span></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        RestHighLevelClient <span class="title function_">elasticsearchRestHighLevelClient</span><span class="params">(RestClientBuilder restClientBuilder)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(restClientBuilder);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">        proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(&#123;RestClientBuilder.class&#125;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RestClientBuilderConfiguration</span> &#123;</span><br><span class="line">        RestClientBuilderConfiguration() &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        RestClientBuilderCustomizer <span class="title function_">defaultRestClientBuilderCustomizer</span><span class="params">(ElasticsearchRestClientProperties properties)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ElasticsearchRestClientAutoConfiguration</span>.DefaultRestClientBuilderCustomizer(properties);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// RestClientBuilder</span></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        RestClientBuilder <span class="title function_">elasticsearchRestClientBuilder</span><span class="params">(ElasticsearchRestClientProperties properties, ObjectProvider&lt;RestClientBuilderCustomizer&gt; builderCustomizers)</span> &#123;</span><br><span class="line">            HttpHost[] hosts = (HttpHost[])properties.getUris().stream().map(<span class="built_in">this</span>::createHttpHost).toArray((x$<span class="number">0</span>) -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HttpHost</span>[x$<span class="number">0</span>];</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="type">RestClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> RestClient.builder(hosts);</span><br><span class="line">            builder.setHttpClientConfigCallback((httpClientBuilder) -&gt; &#123;</span><br><span class="line">                builderCustomizers.orderedStream().forEach((customizer) -&gt; &#123;</span><br><span class="line">                    customizer.customize(httpClientBuilder);</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">return</span> httpClientBuilder;</span><br><span class="line">            &#125;);</span><br><span class="line">            builder.setRequestConfigCallback((requestConfigBuilder) -&gt; &#123;</span><br><span class="line">                builderCustomizers.orderedStream().forEach((customizer) -&gt; &#123;</span><br><span class="line">                    customizer.customize(requestConfigBuilder);</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">return</span> requestConfigBuilder;</span><br><span class="line">            &#125;);</span><br><span class="line">            builderCustomizers.orderedStream().forEach((customizer) -&gt; &#123;</span><br><span class="line">                customizer.customize(builder);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> builder;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> HttpHost <span class="title function_">createHttpHost</span><span class="params">(String uri)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.createHttpHost(URI.create(uri));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException var3) &#123;</span><br><span class="line">                <span class="keyword">return</span> HttpHost.create(uri);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> HttpHost <span class="title function_">createHttpHost</span><span class="params">(URI uri)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.hasLength(uri.getUserInfo())) &#123;</span><br><span class="line">                <span class="keyword">return</span> HttpHost.create(uri.toString());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> HttpHost.create((<span class="keyword">new</span> <span class="title class_">URI</span>(uri.getScheme(), (String)<span class="literal">null</span>, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())).toString());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (URISyntaxException var3) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(var3);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4、索引的增、删、是否存在"><a href="#6-4、索引的增、删、是否存在" class="headerlink" title="6.4、索引的增、删、是否存在"></a>6.4、索引的增、删、是否存在</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试索引的创建 request</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">   <span class="comment">// 1、创建索引请求</span></span><br><span class="line">   <span class="type">CreateIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(<span class="string">&quot;kuang_index&quot;</span>);</span><br><span class="line">   <span class="comment">// 2、客户端执行请求 indexResponse, 请求后获得相应</span></span><br><span class="line">   <span class="type">CreateIndexResponse</span> <span class="variable">createIndexResponse</span> <span class="operator">=</span> client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">   System.out.println(createIndexResponse);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试获取索引，只能判断其是否存在</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testExistIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">   <span class="type">GetIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(<span class="string">&quot;kuang_index&quot;</span>);</span><br><span class="line">   <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">   System.out.println(exists);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除索引</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">   <span class="type">DeleteIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(<span class="string">&quot;kuang_index&quot;</span>);</span><br><span class="line">   <span class="type">AcknowledgedResponse</span> <span class="variable">delete</span> <span class="operator">=</span> client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">   System.out.println(delete.isAcknowledged());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5、文档的操作"><a href="#6-5、文档的操作" class="headerlink" title="6.5、文档的操作"></a>6.5、文档的操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试创建文档</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testAddDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;狂神说&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 创建请求</span></span><br><span class="line">    <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;kuang_index&quot;</span>);</span><br><span class="line">    <span class="comment">// 规则 put /kuang_index/_doc/1</span></span><br><span class="line">    request.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    request.timeout(TimeValue.timeValueDays(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">//    request.timeout(&quot;1&quot;);</span></span><br><span class="line">    <span class="comment">// 将我们的数据放入请求 json</span></span><br><span class="line">    request.source(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line">    <span class="comment">// 客户端发送请求，获取响应结果</span></span><br><span class="line">    <span class="type">IndexResponse</span> <span class="variable">indexResponse</span> <span class="operator">=</span> client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(indexResponse.toString());</span><br><span class="line">    System.out.println(indexResponse.status());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取文档，判断是否存在 get /index/doc/1</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testIsExists</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">GetRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;kuang_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">// 不获取返回的 _source 的上下文了</span></span><br><span class="line">    request.fetchSourceContext(<span class="keyword">new</span> <span class="title class_">FetchSourceContext</span>(<span class="literal">false</span>));</span><br><span class="line">    request.storedFields(<span class="string">&quot;_none_&quot;</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> client.exists(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(exists);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取文档信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">GetRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;kuang_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="type">GetResponse</span> <span class="variable">getResponse</span> <span class="operator">=</span> client.get(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(getResponse.getSourceAsString()); <span class="comment">// 打印文档的内容</span></span><br><span class="line">    System.out.println(getResponse);  <span class="comment">// 返回的全部内容和命令是一样的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新文档的信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">UpdateRequest</span> <span class="variable">updateRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;kuang_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    updateRequest.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;狂神说java&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    updateRequest.doc(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line">    <span class="type">UpdateResponse</span> <span class="variable">updateResponse</span> <span class="operator">=</span> client.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(updateResponse.status());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除文档记录</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;kuang_index&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">    request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">    <span class="type">DeleteResponse</span> <span class="variable">delete</span> <span class="operator">=</span> client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(delete.status());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 批量插入</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">BulkRequest</span> <span class="variable">bulkRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">    bulkRequest.timeout(<span class="string">&quot;10s&quot;</span>);</span><br><span class="line">    ArrayList&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;kuangshen1&quot;</span>, <span class="number">3</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;kuangshen2&quot;</span>, <span class="number">3</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;kuangshen3&quot;</span>, <span class="number">3</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;qinjiang1&quot;</span>, <span class="number">3</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;qinjiang2&quot;</span>, <span class="number">3</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;qinjiang3&quot;</span>, <span class="number">3</span>));</span><br><span class="line">    <span class="comment">// 批处理请求</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        <span class="comment">// 批量更新和批量删除，就在这里修改对应的请求就可以了</span></span><br><span class="line">        bulkRequest.add(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;kuang_index&quot;</span>)</span><br><span class="line">            .id(<span class="string">&quot;&quot;</span> + (i + <span class="number">1</span>))</span><br><span class="line">            .source(JSON.toJSONString(list.get(i)), XContentType.JSON));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">BulkResponse</span> <span class="variable">bulkResponse</span> <span class="operator">=</span> client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(bulkResponse.hasFailures());  <span class="comment">// 是否失败,返回false代表成功</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="comment">// SearchRequest 搜索请求</span></span><br><span class="line"><span class="comment">// SearchSourceBuilder 条件构造</span></span><br><span class="line"><span class="comment">// HighLightBuilder 构建高亮</span></span><br><span class="line"><span class="comment">// TermQueryBuilder  精确查询</span></span><br><span class="line"><span class="comment">// MatchAllQueryBuilder</span></span><br><span class="line"><span class="comment">// xxx QueryBuilder 对应我们刚才看到的命令！</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;kuang_index&quot;</span>);</span><br><span class="line">    <span class="comment">// 构建搜索条件</span></span><br><span class="line">    <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">    <span class="comment">// 查询条件，我们可以使用 QueryBuilders 工具来实现</span></span><br><span class="line">    <span class="comment">// QueryBuilders.termQuery  精确</span></span><br><span class="line">    <span class="comment">//QueryBuilders.matchAllQuery 匹配所有</span></span><br><span class="line">    <span class="type">TermQueryBuilder</span> <span class="variable">termQueryBuilder</span> <span class="operator">=</span> QueryBuilders.termQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;qinjiang1&quot;</span>);</span><br><span class="line">    <span class="comment">//    MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span></span><br><span class="line">    sourceBuilder.query(termQueryBuilder);</span><br><span class="line">    sourceBuilder.timeout(<span class="keyword">new</span> <span class="title class_">TimeValue</span>(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">    searchRequest.source(sourceBuilder);</span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(JSON.toJSONString(searchResponse.getHits()));</span><br><span class="line">    System.out.println(<span class="string">&quot;===========================&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (SearchHit documentFields : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">        System.out.println(documentFields.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、实战"><a href="#七、实战" class="headerlink" title="七、实战"></a>七、实战</h2><p>最终实现效果</p><p><img src="https://img-blog.csdnimg.cn/f7c8a90b28814d62950561761911c6af.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="7-1、搭建项目"><a href="#7-1、搭建项目" class="headerlink" title="7.1、搭建项目"></a>7.1、搭建项目</h3><p>新建module</p><p>导入依赖</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;dependencies&gt;</span></span><br><span class="line">    <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">        <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">        <span class="attr">&lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line">    <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">        <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">        <span class="attr">&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line">    <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">        <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">        <span class="attr">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line">    <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">        <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">        <span class="attr">&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="attr">&lt;scope&gt;runtime&lt;/scope&gt;</span></span><br><span class="line">        <span class="attr">&lt;optional&gt;true&lt;/optional&gt;</span></span><br><span class="line">    <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line">    <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">        <span class="attr">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span></span><br><span class="line">        <span class="attr">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="attr">&lt;optional&gt;true&lt;/optional&gt;</span></span><br><span class="line">    <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line">    <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">        <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">        <span class="attr">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="attr">&lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line">    <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"><span class="attr">&lt;/dependencies&gt;</span></span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">9090 #可选</span></span><br><span class="line"><span class="comment"># 关闭 thymeleaf 的缓存</span></span><br><span class="line"><span class="attr">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><p>导入前端测试页面</p><p>创建IndexController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">   <span class="meta">@GetMapping(&#123;&quot;/&quot;, &quot;index&quot;&#125;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试访问 <a href="http://localhost:9090/">http://localhost:9090/</a></p><p><img src="https://img-blog.csdnimg.cn/fd42837aebb94c0e92e3c50ffe38212b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="7-2、爬虫"><a href="#7-2、爬虫" class="headerlink" title="7.2、爬虫"></a>7.2、爬虫</h3><blockquote><p>数据问题？数据库获取，消息队列中获取，都可以成为数据源，爬虫！</p></blockquote><p>爬取数据：（获取请求返回的页面信息，筛选出我们想要的数据就可以了！）</p><p>导入jsoup包</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;!--</span>        <span class="string">解析网页jsoup--&gt;</span></span><br><span class="line"><span class="attr">&lt;dependency&gt;</span></span><br><span class="line">    <span class="attr">&lt;groupId&gt;org.jsoup&lt;/groupId&gt;</span></span><br><span class="line">    <span class="attr">&lt;artifactId&gt;jsoup&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="attr">&lt;version&gt;1.13.1&lt;/version&gt;</span></span><br><span class="line"><span class="attr">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><p>创建HtmlParseUtil</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HtmlParseUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 获取请求 http://search.jd.com/search?keyword=java</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://search.jd.com/search?keyword=java&quot;</span>;</span><br><span class="line">        <span class="comment">// 解析网页。（Jsoup 返回Document就是Document对象）</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="number">30000</span>);</span><br><span class="line">        <span class="comment">// 所有你在js中可以使用的方法，这里都能使用！</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">element</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;J_goodsList&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取所有的li元素</span></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">li</span> <span class="operator">=</span> element.getElementsByTag(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取元素中的内容，，这里el， 就是每一个li标签了！</span></span><br><span class="line">        <span class="keyword">for</span> (Element el : li) &#123;</span><br><span class="line">            <span class="comment">// 关于这种图片特别多的网站，所有的图片都是延迟加载的！</span></span><br><span class="line">            <span class="comment">// data-lazy-img</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">img</span> <span class="operator">=</span> el.getElementsByTag(<span class="string">&quot;img&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;data-lazy-img&quot;</span>);  <span class="comment">// 获取li下 第一张图片</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">price</span> <span class="operator">=</span> el.getElementsByClass(<span class="string">&quot;p-price&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> el.getElementsByClass(<span class="string">&quot;p-name&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line">            System.out.println(img);</span><br><span class="line">            System.out.println(price);</span><br><span class="line">            System.out.println(title);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7f33dfcdd13a4fbba5f152e50ac27f6f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>封装为方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HtmlParseUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Content&gt; <span class="title function_">parseJD</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://search.jd.com/search?keyword=&quot;</span> + keywords;</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="number">30000</span>);</span><br><span class="line">        <span class="type">Element</span> <span class="variable">element</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;J_goodsList&quot;</span>);</span><br><span class="line">        <span class="type">Elements</span> <span class="variable">li</span> <span class="operator">=</span> element.getElementsByTag(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        List&lt;Content&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Element el : li) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">img</span> <span class="operator">=</span> el.getElementsByTag(<span class="string">&quot;img&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;data-lazy-img&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">price</span> <span class="operator">=</span> el.getElementsByClass(<span class="string">&quot;p-price&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> el.getElementsByClass(<span class="string">&quot;p-name&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            <span class="type">Content</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Content</span>();</span><br><span class="line">            content.setImg(img);</span><br><span class="line">            content.setTitle(title);</span><br><span class="line">            content.setPrice(price);</span><br><span class="line">            list.add(content);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service调用</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、解析数据放入 es 索引中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">parseContent</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    List&lt;Content&gt; contents = <span class="keyword">new</span> <span class="title class_">HtmlParseUtil</span>().parseJD(keywords);</span><br><span class="line">    <span class="comment">// 把查询到的数据放入 es 中</span></span><br><span class="line">    <span class="type">BulkRequest</span> <span class="variable">bulkRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">    bulkRequest.timeout(<span class="string">&quot;2m&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Content content : contents) &#123;</span><br><span class="line">        bulkRequest.add(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;jd_goods&quot;</span>)</span><br><span class="line">            .source(JSON.toJSONString(content), XContentType.JSON)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">BulkResponse</span> <span class="variable">bulk</span> <span class="operator">=</span> restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="keyword">return</span> !bulk.hasFailures();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>controller层</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/parse/&#123;keyword&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">parse</span><span class="params">(<span class="meta">@PathVariable(&quot;keyword&quot;)</span> String keywords)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="keyword">return</span> contentService.parseContent(keywords);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过接口调用后数据存入了es中</p><p><img src="https://img-blog.csdnimg.cn/afe72d02b0424fb9a649ce0be57f3e8b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><strong>分页查询</strong></p><p>service层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2、获取这些数据实现搜索功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">searchPage</span><span class="params">(String keyword, <span class="type">int</span> pageNo, <span class="type">int</span> pageSize)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (pageNo &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        pageNo = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 条件搜索</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;jd_goods&quot;</span>);</span><br><span class="line">    <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">    <span class="comment">// 精准匹配</span></span><br><span class="line">    <span class="type">TermQueryBuilder</span> <span class="variable">termQueryBuilder</span> <span class="operator">=</span> QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>, keyword);</span><br><span class="line">    sourceBuilder.query(termQueryBuilder);</span><br><span class="line">    sourceBuilder.timeout(<span class="keyword">new</span> <span class="title class_">TimeValue</span>(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">    <span class="comment">// 分页</span></span><br><span class="line">    sourceBuilder.from(pageNo);</span><br><span class="line">    sourceBuilder.size(pageSize);</span><br><span class="line">    <span class="comment">// 执行搜索</span></span><br><span class="line">    searchRequest.source(sourceBuilder);</span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 解析结果</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit documentFields : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">        list.add(documentFields.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller层</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;/search/&#123;keyword&#125;/&#123;pageNo&#125;/&#123;pageSize&#125;&quot;)</span><br><span class="line">public List&lt;Map&lt;String, Object&gt;&gt; search(@PathVariable(&quot;keyword&quot;) String keyword,</span><br><span class="line">                                        @PathVariable(&quot;pageNo&quot;) int pageNo,</span><br><span class="line">                                        @PathVariable(&quot;pageSize&quot;) int pageSize) throws IOException &#123;</span><br><span class="line">    return contentService.searchPage(keyword, pageNo, pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\渡\AppData\Roaming\Typora\typora-user-images\image-20220114154107731.png" alt="image-20220114154107731"></p><h3 id="7-3、前后端分离"><a href="#7-3、前后端分离" class="headerlink" title="7.3、前后端分离"></a>7.3、前后端分离</h3><p>载并引入Vue.min.js和axios.js</p><p>如果安装了nodejs，可以按如下步骤</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install vue</span><br><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>修改静态页面</p><p>引入js</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script th:src=&quot;@&#123;/js/vue.min.js&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script th:src=&quot;@&#123;/js/axios.min.js&#125;&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>修改后的index.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>狂神说Java-ES仿京东实战<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/style.css&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;pg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mallPage&quot;</span> <span class="attr">class</span>=<span class="string">&quot; mallist tmall- page-not-market &quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 头部搜索 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span> <span class="attr">class</span>=<span class="string">&quot; header-list-app&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;headerLayout&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;headerCon &quot;</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- Logo--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;mallLogo&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/images/jdlogo.png&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header-extra&quot;</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--搜索--&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mallSearch&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mall-search&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;searchTop&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mallSearch-form clearfix&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">legend</span>&gt;</span>天猫搜索<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mallSearch-input clearfix&quot;</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;s-combobox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;s-combobox-685&quot;</span>&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;s-combobox-input-wrap&quot;</span>&gt;</span></span><br><span class="line">                                                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dd&quot;</span></span></span><br><span class="line"><span class="tag">                                                               <span class="attr">id</span>=<span class="string">&quot;mq&quot;</span></span></span><br><span class="line"><span class="tag">                                                               <span class="attr">class</span>=<span class="string">&quot;s-combobox-input&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;searchKey&quot;</span> <span class="attr">id</span>=<span class="string">&quot;searchbtn&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;relKeyTop&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>狂神说Java<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>狂神说前端<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>狂神说Linux<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>狂神说大数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>狂神聊理财<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 商品详情页面 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 品牌分类 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;navAttrsForm&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;attrs j_NavAttrs&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:block&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;brandAttr j_nav_brand&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;j_Brand attr&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;attrKey&quot;</span>&gt;</span></span><br><span class="line">                                            品牌</span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;attrValues&quot;</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;av-collapse row-2&quot;</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span> 狂神说 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span> Java <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 排序规则 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;filter clearfix&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;fSort fSort-cur&quot;</span>&gt;</span>综合<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;f-ico-arrow-d&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;fSort&quot;</span>&gt;</span>人气<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;f-ico-arrow-d&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;fSort&quot;</span>&gt;</span>新品<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;f-ico-arrow-d&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;fSort&quot;</span>&gt;</span>销量<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;f-ico-arrow-d&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;fSort&quot;</span>&gt;</span>价格<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;f-ico-triangle-mt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;f-ico-triangle-mb&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 商品详情 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view grid-nosku&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;result in results&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product-iWrap&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="comment">&lt;!--商品封面--&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;productImg-wrap&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;productImg&quot;</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;result.img&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                    <span class="comment">&lt;!--价格--&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;productPrice&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>¥<span class="tag">&lt;/<span class="name">b</span>&gt;</span>&#123; &#123;result.price&#125; &#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                                    <span class="comment">&lt;!--标题--&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;productTitle&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">a</span>&gt;</span>&#123; &#123;result.title&#125; &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                                    <span class="comment">&lt;!-- 店铺名 --&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;productShop&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>店铺： 狂神说Java <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                    <span class="comment">&lt;!-- 成交信息 --&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;productStatus&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>月成交<span class="tag">&lt;<span class="name">em</span>&gt;</span>999笔<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>评价 <span class="tag">&lt;<span class="name">a</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/vue.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">keyword</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//搜素的关键字</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">results</span>: []   <span class="comment">//搜素的结果</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">searchKey</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">let</span> keyword = <span class="variable language_">this</span>.<span class="property">keyword</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(keyword);</span></span><br><span class="line"><span class="language-javascript">                        axios.<span class="title function_">get</span>(<span class="string">&#x27;search/&#x27;</span> + keyword + <span class="string">&#x27;/0/10&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">results</span> = response.<span class="property">data</span>; <span class="comment">//绑定数据</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试搜索</p><p><img src="C:\Users\渡\AppData\Roaming\Typora\typora-user-images\image-20220114153859301.png" alt="image-20220114153859301"></p><h3 id="7-4、搜索高亮"><a href="#7-4、搜索高亮" class="headerlink" title="7.4、搜索高亮"></a>7.4、搜索高亮</h3><p>service（实现高亮）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 3、获取这些数据实现搜索高亮功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">searchHighLightPage</span><span class="params">(String keyword, <span class="type">int</span> pageNo, <span class="type">int</span> pageSize)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (pageNo &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        pageNo = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 条件搜索</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;jd_goods&quot;</span>);</span><br><span class="line">    <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">    <span class="comment">// 精准匹配</span></span><br><span class="line">    <span class="type">TermQueryBuilder</span> <span class="variable">termQueryBuilder</span> <span class="operator">=</span> QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>, keyword);</span><br><span class="line">    sourceBuilder.query(termQueryBuilder);</span><br><span class="line">    sourceBuilder.timeout(<span class="keyword">new</span> <span class="title class_">TimeValue</span>(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">    <span class="comment">// 高亮</span></span><br><span class="line">    <span class="type">HighlightBuilder</span> <span class="variable">highlightBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>();</span><br><span class="line">    highlightBuilder.field(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">    highlightBuilder.requireFieldMatch(<span class="literal">false</span>);  <span class="comment">// 多个高亮显示！</span></span><br><span class="line">    highlightBuilder.preTags(<span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>);</span><br><span class="line">    highlightBuilder.postTags(<span class="string">&quot;&lt;/span&gt;&quot;</span>);</span><br><span class="line">    sourceBuilder.highlighter(highlightBuilder);</span><br><span class="line">    <span class="comment">// 分页</span></span><br><span class="line">    sourceBuilder.from(pageNo);</span><br><span class="line">    sourceBuilder.size(pageSize);</span><br><span class="line">    <span class="comment">// 执行搜索</span></span><br><span class="line">    searchRequest.source(sourceBuilder);</span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 解析结果</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit documentFields : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">        Map&lt;String, HighlightField&gt; highlightFields = documentFields.getHighlightFields();</span><br><span class="line">        <span class="type">HighlightField</span> <span class="variable">title</span> <span class="operator">=</span> highlightFields.get(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; sourceAsMap = documentFields.getSourceAsMap();  <span class="comment">// 原来的结果！</span></span><br><span class="line">        <span class="comment">// 解析高亮的字段，将原来的字段换为我们高亮的字段即可！</span></span><br><span class="line">        <span class="keyword">if</span> (title != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">n_title</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            Text[] fragments = title.fragments();</span><br><span class="line">            <span class="keyword">for</span> (Text text : fragments) &#123;</span><br><span class="line">                n_title += text;</span><br><span class="line">            &#125;</span><br><span class="line">            sourceAsMap.put(<span class="string">&quot;title&quot;</span>, n_title); <span class="comment">// 高亮字段替换掉原来的内容即可！</span></span><br><span class="line">        &#125;</span><br><span class="line">        list.add(sourceAsMap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Controller层的修改</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/search/&#123;keyword&#125;/&#123;pageNo&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">searchHighLightPage</span><span class="params">(<span class="meta">@PathVariable(&quot;keyword&quot;)</span> String keyword,</span></span><br><span class="line"><span class="params">                                                     <span class="meta">@PathVariable(&quot;pageNo&quot;)</span> <span class="type">int</span> pageNo,</span></span><br><span class="line"><span class="params">                                                     <span class="meta">@PathVariable(&quot;pageSize&quot;)</span> <span class="type">int</span> pageSize)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> contentService.searchHighLightPage(keyword, pageNo, pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e3433e183c004e468ad32aa38c64b212.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6b6Z5a6HXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>修改html</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--标题--&gt;</span><br><span class="line">&lt;p class=&quot;productTitle&quot;&gt;</span><br><span class="line"> &lt;!--这里v-html是将后端高亮处理进行解析渲染--&gt;</span><br><span class="line">    &lt;a v-html=&quot;result.title&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\渡\AppData\Roaming\Typora\typora-user-images\image-20220114153911649.png" alt="image-20220114153911649"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticserach </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记</title>
      <link href="/2022/02/17/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/02/17/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Docker概述"><a href="#1-Docker概述" class="headerlink" title="1 Docker概述"></a>1 Docker概述</h2><h3 id="1-1-Docker为什么会出现"><a href="#1-1-Docker为什么会出现" class="headerlink" title="1.1 Docker为什么会出现"></a>1.1 Docker为什么会出现</h3><p>传统：开发jar，运维来做！</p><p>现在：开发打包部署上线，一套流程全做完！</p><p>java — apk — 发布(应用商店) — 张三使用apk — 到应用商店下载安装即可！</p><p>java — jar(环境) — 打包项目带上环境(镜像) — (Docker仓库：商店) — 下载我们发布的镜像 — 直接运行即可！</p><p>Docker给以上的问题，提出了解决方案！</p><p>Docker的思想来自集装箱！</p><p>JRE — 多个应用(端口冲突) — 原来都是交叉的！</p><p>隔离：Docker核心思想！打包装箱！每个箱子都是互相隔离的。通过隔离机制，可以将服务器利用到极致！</p><h3 id="1-2-Docker的历史"><a href="#1-2-Docker的历史" class="headerlink" title="1.2 Docker的历史"></a>1.2 Docker的历史</h3><p>Docker刚诞生时，没有引起行业的注意！</p><p>2013年，Docker开源，现在越来越多的人发现了Docker的优点，然后就火了，Docker每个月都会更新一个版本！</p><p>2014年4月9日，Docker1.0发布！</p><p>Docker为什么这么火？十分的轻巧！</p><p>在容器技术出来之前，我们都是使用虚拟机技术！</p><p>虚拟机：在window中装一个虚拟机软件Vmware，通过这个软件我们可以虚拟出来一个或多个电脑！笨重！虚拟机也是属于虚拟化技术，Docker容器技术，也是一种虚拟化技术！</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vm : linux centos原生镜像(一个电脑！)隔离，需要开启多个虚拟机！几个G   启动需要几分钟</span><br><span class="line">docker : 隔离，镜像(最核心的环境  4m + jdk + mysql)十分的小巧，运行镜像就可以了！小巧！几个M或KB   秒级启动</span><br></pre></td></tr></table></figure><blockquote><p>聊聊Docker</p></blockquote><p>Docker是基于Go语言开发的，开源项目！</p><p>官网：<a href="https://www.docker.com/">https://www.docker.com/</a></p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudyb8cfa84a-9571-4774-9ee7-43badfcfc057.png" alt="img"></p><p>文档地址：<a href="https://docs.docker.com/">https://docs.docker.com/</a></p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudy3ae658fd-80fd-4aa1-aebc-5811f6ab0050.png" alt="img"></p><p>Docker的文档是超级详细的！</p><p>仓库地址：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h3 id="1-3-Docker能干嘛"><a href="#1-3-Docker能干嘛" class="headerlink" title="1.3 Docker能干嘛"></a>1.3 Docker能干嘛</h3><blockquote><p>之前的虚拟机技术</p></blockquote><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudy7c89b5f0-ad91-41f3-ba5c-588d0b48bc30.png" alt="img"></p><p>虚拟机技术缺点：</p><ol><li>资源占用十分多</li><li>冗余步骤多</li><li>启动很慢</li></ol><blockquote><p>容器化技术</p></blockquote><p><strong>容器化技术不是模拟的一个完整的操作系统</strong></p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudyeb9396c9-317f-49b6-b529-1505fe8e66b4.png" alt="img"></p><p>比较Docker和虚拟机技术的不同：</p><ul><li>传统虚拟机，虚拟出一条硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件</li><li>容器内的应用直接在宿主机的内容，容器是没有自己的内核的，也没有虚拟我们的硬件，所以就轻便了</li><li>每个容器间是互相隔离，每个容器内都有一个属于自己的文件系统，互不影响</li></ul><blockquote><p>DevOps（开发、运维）</p></blockquote><p><strong>应用更快的交付和部署</strong></p><p>传统：一堆帮助文档，安装程序</p><p>Docker：打包镜像发布测试，一键运行</p><p><strong>更便捷的升级和扩缩容</strong></p><p>使用了Docker之后，我们部署应用就和搭积木一样！</p><p><strong>更简单的系统运维</strong></p><p>在容器化之后，我们的开发，测试环境都是高度一致的。</p><p><strong>更高效的计算机资源利用</strong></p><p>Docker是内核级别的虚拟化，可以在一个物理机上可以运行很多的容器实例！服务器的性能可以被压榨到极致。</p><h2 id="2-Docker安装"><a href="#2-Docker安装" class="headerlink" title="2 Docker安装"></a>2 Docker安装</h2><h3 id="2-1-Docker的基本组成"><a href="#2-1-Docker的基本组成" class="headerlink" title="2.1 Docker的基本组成"></a>2.1 Docker的基本组成</h3><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudyfffb9e58-956f-40be-ac1b-3e5e13629f0e.jpg" alt="img"></p><p><strong>镜像(image)</strong></p><p>Docker镜像就好比是一个模板，可以通过这个模板来创建容器服务，Tomcat镜像==》Run==》Tomcat01容器（提供服务器），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的）。</p><p><strong>容器(container)</strong></p><p>Docker利用容器技术，独立运行一个或者一个组应用，通过镜像来创建的。</p><p>启动、停止、删除、基本命令！</p><p>目前就可以把这个容器理解为就是一个简易的Linux系统</p><p><strong>仓库(repository)</strong></p><p>仓库就是存放镜像的地方！</p><p>仓库分为共有仓库和私有仓库！</p><p>Docker Hub</p><p>阿里云都有容器服务器（配置镜像加速）</p><h3 id="2-2-安装Docker-适用于VMware"><a href="#2-2-安装Docker-适用于VMware" class="headerlink" title="2.2 安装Docker(适用于VMware)"></a>2.2 安装Docker(适用于VMware)</h3><blockquote><p>环境准备</p></blockquote><p>1、需要会一点点的Linux基础</p><p>2、CentOS7</p><p>3、使用Xshell连接远程服务器进行操作</p><blockquote><p>环境查看</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">系统内核是 3.10 以上的</span></span><br><span class="line">[root@iZ2zegy1k4araknrzdo982Z ~]# uname -r</span><br><span class="line">4.19.34-11.al7.x86_64</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">系统版本</span></span><br><span class="line">[root@iZ2zegy1k4araknrzdo982Z ~]# cat /etc/os-release</span><br><span class="line">NAME=&quot;Aliyun Linux&quot;</span><br><span class="line">VERSION=&quot;2.1903 (Hunting Beagle)&quot;</span><br><span class="line">ID=&quot;alinux&quot;</span><br><span class="line">ID_LIKE=&quot;rhel fedora centos&quot;</span><br><span class="line">VERSION_ID=&quot;2.1903&quot;</span><br><span class="line">PRETTY_NAME=&quot;Aliyun Linux 2.1903 (Hunting Beagle)&quot;</span><br><span class="line">ANSI_COLOR=&quot;0;31&quot;</span><br><span class="line">HOME_URL=&quot;https://www.aliyun.com/&quot;</span><br></pre></td></tr></table></figure><blockquote><p>安装</p></blockquote><ul><li>帮助文档</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">1、卸载旧的版本</span></span><br><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"><span class="meta"># </span><span class="language-bash">2、需要的安装包</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="meta"># </span><span class="language-bash">3、设置镜像的仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo   # 默认是国外的，很慢！！！</span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  # 推荐使用阿里云的，十分快</span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.tuna.tsinghua.edu.cn/</span><br><span class="line"><span class="meta"># </span><span class="language-bash">更新yum软件包索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"><span class="meta"># </span><span class="language-bash">4、安装docker相关引擎       docker-ce  社区版     docker-ee  企业版</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta"># </span><span class="language-bash">5、启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta"># </span><span class="language-bash">6、使用docker version查看是否安装成功</span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudya7a24305-8b6f-45ac-8114-6bdac0bcaff6.png" alt="img"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">7、hello-world</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudy9ffa2873-4fa7-4b91-9b2e-37341a12a305.jpg" alt="img"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">8、查看一下下载的这个hello-world镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudy3735ff26-eb64-4cf6-9c15-c3ef81f9d482.png" alt="img"></p><h3 id="2-3-卸载Docker"><a href="#2-3-卸载Docker" class="headerlink" title="2.3 卸载Docker"></a>2.3 卸载Docker</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">1、卸载依赖</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta"># </span><span class="language-bash">2、删除资源</span></span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line"><span class="meta"># </span><span class="language-bash">   /var/lib/docker     docker的默认工作路径！！！</span></span><br></pre></td></tr></table></figure><h3 id="2-4-阿里云镜像加速"><a href="#2-4-阿里云镜像加速" class="headerlink" title="2.4 阿里云镜像加速"></a>2.4 阿里云镜像加速</h3><p>1.登录阿里云，找到容器镜像服务</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudy5da1d524-c943-40dc-a186-cca476f38912.png" alt="img"></p><p>2.找到镜像加速地址</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudy8fd2c906-3195-4350-98be-0bd8ab036ece.png" alt="镜像加速地址"></p><p>3.配置使用</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">1、新建一个目录</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"><span class="meta"># </span><span class="language-bash">2、编译配置文件</span></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://vp85ggug.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta"># </span><span class="language-bash">3、重启该服务</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="meta"># </span><span class="language-bash">4、重启docker</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="2-5-回顾Hello-World流程"><a href="#2-5-回顾Hello-World流程" class="headerlink" title="2.5 回顾Hello World流程"></a>2.5 回顾Hello World流程</h3><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudy39693217-6fc3-4cf1-92f7-15bf02677829.jpg" alt="img"></p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudy96b95d92-dd59-456d-a95b-769219ad9d0a.png" alt="run的运行流程图"></p><h3 id="2-6-底层原理"><a href="#2-6-底层原理" class="headerlink" title="2.6 底层原理"></a>2.6 底层原理</h3><blockquote><p>Docker是怎么工作的？</p></blockquote><p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上。通过Socket从客户端访问，DockerServer接收到Docker-Client的指令，就会执行这个命令！</p><blockquote><p>Docker为什么比虚拟机快？</p></blockquote><ul><li>Docker有着比虚拟机更少的抽象层</li><li>Docker利用的是宿主机的内核，虚拟机需要的是Guest OS</li><li>所以说，新建一个容器的时候，Docker不需要像虚拟机一样重新加载一个操作系统内核，避免引导。虚拟机是加载Guest OS，分钟级别的；而Docker是利用宿主机的操作系统，省略了这个复杂的过程，秒级的</li></ul><h2 id="3-Docker的常用命令"><a href="#3-Docker的常用命令" class="headerlink" title="3 Docker的常用命令"></a>3 Docker的常用命令</h2><h3 id="3-1-帮助命令和文档"><a href="#3-1-帮助命令和文档" class="headerlink" title="3.1 帮助命令和文档"></a>3.1 帮助命令和文档</h3><blockquote><p>帮助命令</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version    # 显示Docker的版本信息</span><br><span class="line">docker info         # 显示Docker的系统信息，包括镜像和容器的数量</span><br><span class="line">docker 命令 --help      # 帮助命令，可以查看Docker的所有命令</span><br></pre></td></tr></table></figure><blockquote><p>帮助文档的地址</p></blockquote><p><a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p><h3 id="3-2-镜像命令"><a href="#3-2-镜像命令" class="headerlink" title="3.2 镜像命令"></a>3.2 镜像命令</h3><p>+ docker images：查看所有本地的主机上的镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    d1165f221234   6 months ago   13.3kB</span><br><span class="line"><span class="meta"># </span><span class="language-bash">解释</span></span><br><span class="line">REPOSITORY   镜像的仓库源</span><br><span class="line">TAG                 镜像的标签</span><br><span class="line">IMAGE ID        镜像的ID</span><br><span class="line">CREATED         镜像的创建时间</span><br><span class="line">SIZE                 镜像的大小</span><br><span class="line"><span class="meta"># </span><span class="language-bash">可选项</span></span><br><span class="line">-a,  --all            # 列出所有镜像</span><br><span class="line">-q,  --quiet       # 只显示镜像的ID</span><br></pre></td></tr></table></figure><p>+ docker search：搜索镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# docker search mysql</span><br><span class="line">NAME                                    DESCRIPTION                                 STARS    OFFICIAL     AUTOMATED</span><br><span class="line">mysql                                     MySQL is a widely used,…             11385     [OK]       </span><br><span class="line">mariadb                                 MariaDB Server is a high…             4319      [OK]       </span><br><span class="line">mysql/mysql-server               Optimized MySQL Server…            846                           [OK]</span><br><span class="line">percona                                  Percona Server is a fork…              551        [OK]       </span><br><span class="line">phpmyadmin                         phpMyAdmin - A web…                 314        [OK]       </span><br><span class="line">centos/mysql-57-centos7     MySQL 5.7 SQL database server     91                </span><br><span class="line">... ... ...                                     ... ... ...                                               ... ...        ... ... ...          ... ... ...</span><br><span class="line"><span class="meta"># </span><span class="language-bash">可选项，通过搜藏来过滤</span></span><br><span class="line">--filter=STARS=3000             # 搜索出来的镜像就是STARS大于3000的</span><br></pre></td></tr></table></figure><p>+ docker pull：下载镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">下载镜像  docker pull 镜像名[:tag]</span></span><br><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# docker pull mysql</span><br><span class="line">Using default tag: latest                    # 如果不写tag，默认就是latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">a330b6cecb98: Pull complete           # 分层下载，docker image的核心，联合文件系统</span><br><span class="line">9c8f656c32b8: Pull complete </span><br><span class="line">88e473c3f553: Pull complete </span><br><span class="line">062463ea5d2f: Pull complete </span><br><span class="line">daf7e3bdf4b6: Pull complete </span><br><span class="line">1839c0b7aac9: Pull complete </span><br><span class="line">cf0a0cfee6d0: Pull complete </span><br><span class="line">1b42041bb11e: Pull complete </span><br><span class="line">10459d86c7e6: Pull complete </span><br><span class="line">b7199599d5f9: Pull complete </span><br><span class="line">1d6f51e17d45: Pull complete </span><br><span class="line">50e0789bacad: Pull complete </span><br><span class="line">Digest: sha256:99e0989e7e3797cfbdb8d51a19d32c8d286dd8862794d01a547651a896bcf00c      # 签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest            # 真实地址</span><br><span class="line"><span class="meta"># </span><span class="language-bash">等价于它</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull docker.io/library/mysql:latest  </span><br><span class="line"><span class="meta"># </span><span class="language-bash">指定版本下载</span></span><br><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">a330b6cecb98: Already exists </span><br><span class="line">9c8f656c32b8: Already exists </span><br><span class="line">88e473c3f553: Already exists </span><br><span class="line">062463ea5d2f: Already exists </span><br><span class="line">daf7e3bdf4b6: Already exists </span><br><span class="line">1839c0b7aac9: Already exists </span><br><span class="line">cf0a0cfee6d0: Already exists </span><br><span class="line">fae7a809788c: Pull complete </span><br><span class="line">dae5a82a61f0: Pull complete </span><br><span class="line">7063da9569eb: Pull complete </span><br><span class="line">51a9a9b4ef36: Pull complete </span><br><span class="line">Digest: sha256:d9b934cdf6826629f8d02ea01f28b2c4ddb1ae27c32664b14867324b3e5e1291</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudy5f33bde9-1d5c-4c31-b550-abc2a7093228.png" alt="img"></p><p>+ docker rmi -f：删除镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">根据ID删除指定镜像</span></span><br><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# docker rmi -f 1d7aba917169</span><br><span class="line"><span class="meta"># </span><span class="language-bash">删除多个镜像</span></span><br><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# docker rmi -f 镜像id 镜像id 镜像id 镜像id</span><br><span class="line"><span class="meta"># </span><span class="language-bash">删除全部的镜像</span></span><br><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# docker rmi -f $(docker images -aq)</span><br></pre></td></tr></table></figure><h3 id="3-3-容器命令"><a href="#3-3-容器命令" class="headerlink" title="3.3 容器命令"></a>3.3 容器命令</h3><p>说明：我们有了镜像才可以创建容器，Linux，下载一个Centos镜像来测试学习</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p>- 新建容器并启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta"># </span><span class="language-bash">参数说明</span></span><br><span class="line">--name=&quot;Name&quot;     容器名字，用来区分容器</span><br><span class="line">-d                             后台方式运行</span><br><span class="line">-it                             使用交互方式运行，进入容器查看内容</span><br><span class="line">-p                             指定容器的端口  -p    8080:8080</span><br><span class="line">    -p ip:主机端口:容器端口</span><br><span class="line">    -p  主机端口:容器端口</span><br><span class="line">    -p  容器端口</span><br><span class="line">    容器端口</span><br><span class="line">-P                             随机指定端口</span><br><span class="line"><span class="meta"># </span><span class="language-bash">测试，启动并进入容器</span></span><br><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# docker run -it centos /bin/bash</span><br><span class="line"><span class="meta"># </span><span class="language-bash">查看容器内的centos，基础版本，很多命令都是不完善的</span></span><br><span class="line">[root@27138e607d88 /]# ls             </span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure><p>- 退出容器，从容器中退出主机</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@27138e607d88 /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# ls</span><br><span class="line">env.txt  sa_recovery.log</span><br></pre></td></tr></table></figure><p>- 列出运行的容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">docker ps：列出当前正在运行的容器</span></span><br><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"><span class="meta"># </span><span class="language-bash">docker ps -a：列出当前正在运行的容器+历史运行过的容器</span></span><br><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED         STATUS                     PORTS     NAMES</span><br><span class="line">27138e607d88   centos         &quot;/bin/bash&quot;   6 minutes ago   Exited (0) 2 minutes ago             nifty_knuth</span><br><span class="line">a9d2bde35c33   d1165f221234   &quot;/hello&quot;      2 hours ago     Exited (0) 2 hours ago               tender_cori</span><br><span class="line"><span class="meta"># </span><span class="language-bash">docker ps -a -n=?：显示最近创建的?个容器</span></span><br><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# docker ps -a -n=1</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                     PORTS     NAMES</span><br><span class="line">27138e607d88   centos    &quot;/bin/bash&quot;   8 minutes ago   Exited (0) 3 minutes ago             nifty_knuth</span><br><span class="line"><span class="meta"># </span><span class="language-bash">docker ps -q：只显示容器的编号</span></span><br></pre></td></tr></table></figure><p>- 退出容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit                     # 直接容器停止并退出</span><br><span class="line">Ctrl + P + Q       # 容器不停止退出</span><br></pre></td></tr></table></figure><p>- 删除容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器id                             # 删除指定的容器，不能删除正在运行的容器，如果要强制删除就是rm -f</span><br><span class="line">docker rm -f $(docker ps -aq)         # 删除所有的容器</span><br><span class="line">docker ps -a -q|xargs docker rm     # 删除所有容器</span><br></pre></td></tr></table></figure><p>- 启动和停止容器的操作</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器id              # 启动容器</span><br><span class="line">docker restart 容器id           # 停止容器</span><br><span class="line">docker stop 容器id              # 停止当前正在运行的容器</span><br><span class="line">docker kill 容器id                 # 强制停止当前容器</span><br></pre></td></tr></table></figure><h3 id="3-4-常用其他命令"><a href="#3-4-常用其他命令" class="headerlink" title="3.4 常用其他命令"></a>3.4 常用其他命令</h3><p>* 后台启动容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">命令 docker run -d 镜像名</span></span><br><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# docker run -d centos</span><br><span class="line">b2766d3656270d6e24a3ccb7b8a72607e62367955e07e103f588709bdb9c9533</span><br><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"><span class="meta"># </span><span class="language-bash">问题docker ps，发现centos停止了</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">常见的坑，docker容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</span></span><br></pre></td></tr></table></figure><p>* 查看日志命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f -t --tail         容器，没有日志</span><br><span class="line"><span class="meta"># </span><span class="language-bash">自己编写一段shell脚本</span></span><br><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# docker run -d centos /bin/sh -c &quot;while true; do echo kuangshen;sleep 1;done&quot;</span><br><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     </span><br><span class="line">2382115c04e3   centos  </span><br><span class="line"><span class="meta"># </span><span class="language-bash">显示日志</span></span><br><span class="line">-tf                       # 显示日志</span><br><span class="line">--tail number     # 要显示日志条数</span><br><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# docker logs -tf --tail 10 2382115c04e3</span><br></pre></td></tr></table></figure><p>* 查看容器中进程信息 ps</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">命令   docker top 容器<span class="built_in">id</span></span></span><br><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# docker top 2382115c04e3</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 </span><br><span class="line">root                20227               20164               0                   13:38               ?                  </span><br><span class="line">root                22455               20227               0                   13:50               ?</span><br></pre></td></tr></table></figure><p>* 查看镜像的元数据</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">命令</span></span><br><span class="line">docker inspect 容器id</span><br><span class="line"><span class="meta"># </span><span class="language-bash">测试</span></span><br><span class="line">[root@iz2zegy1k4araknrzdo982z ~]# docker inspect 2382115c04e3</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;2382115c04e3a04be0a3314d0a5ebd894118870a5ee7c4c717c2861feb740c8a&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-09-09T05:38:12.324834866Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true; do echo kuangshen;sleep 1;done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 20227,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2021-09-09T05:38:12.654779332Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/2382115c04e3a04be0a3314d0a5ebd894118870a5ee7c4c717c2861feb740c8a/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/2382115c04e3a04be0a3314d0a5ebd894118870a5ee7c4c717c2861feb740c8a/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/2382115c04e3a04be0a3314d0a5ebd894118870a5ee7c4c717c2861feb740c8a/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/2382115c04e3a04be0a3314d0a5ebd894118870a5ee7c4c717c2861feb740c8a/2382115c04e3a04be0a3314d0a5ebd894118870a5ee7c4c717c2861feb740c8a-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/focused_brattain&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class="line">            &quot;RestartPolicy&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class="line">                &quot;MaximumRetryCount&quot;: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AutoRemove&quot;: false,</span><br><span class="line">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class="line">            &quot;VolumesFrom&quot;: null,</span><br><span class="line">            &quot;CapAdd&quot;: null,</span><br><span class="line">            &quot;CapDrop&quot;: null,</span><br><span class="line">            &quot;CgroupnsMode&quot;: &quot;host&quot;,</span><br><span class="line">            &quot;Dns&quot;: [],</span><br><span class="line">            &quot;DnsOptions&quot;: [],</span><br><span class="line">            &quot;DnsSearch&quot;: [],</span><br><span class="line">            &quot;ExtraHosts&quot;: null,</span><br><span class="line">            &quot;GroupAdd&quot;: null,</span><br><span class="line">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Links&quot;: null,</span><br><span class="line">            &quot;OomScoreAdj&quot;: 0,</span><br><span class="line">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Privileged&quot;: false,</span><br><span class="line">            &quot;PublishAllPorts&quot;: false,</span><br><span class="line">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class="line">            &quot;SecurityOpt&quot;: null,</span><br><span class="line">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;ShmSize&quot;: 67108864,</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class="line">            &quot;ConsoleSize&quot;: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpuShares&quot;: 0,</span><br><span class="line">            &quot;Memory&quot;: 0,</span><br><span class="line">            &quot;NanoCpus&quot;: 0,</span><br><span class="line">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class="line">            &quot;BlkioWeight&quot;: 0,</span><br><span class="line">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceReadIOps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteIOps&quot;: null,</span><br><span class="line">            &quot;CpuPeriod&quot;: 0,</span><br><span class="line">            &quot;CpuQuota&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class="line">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Devices&quot;: [],</span><br><span class="line">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class="line">            &quot;DeviceRequests&quot;: null,</span><br><span class="line">            &quot;KernelMemory&quot;: 0,</span><br><span class="line">            &quot;KernelMemoryTCP&quot;: 0,</span><br><span class="line">            &quot;MemoryReservation&quot;: 0,</span><br><span class="line">            &quot;MemorySwap&quot;: 0,</span><br><span class="line">            &quot;MemorySwappiness&quot;: null,</span><br><span class="line">            &quot;OomKillDisable&quot;: false,</span><br><span class="line">            &quot;PidsLimit&quot;: null,</span><br><span class="line">            &quot;Ulimits&quot;: null,</span><br><span class="line">            &quot;CpuCount&quot;: 0,</span><br><span class="line">            &quot;CpuPercent&quot;: 0,</span><br><span class="line">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class="line">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class="line">            &quot;MaskedPaths&quot;: [</span><br><span class="line">                &quot;/proc/asound&quot;,</span><br><span class="line">                &quot;/proc/acpi&quot;,</span><br><span class="line">                &quot;/proc/kcore&quot;,</span><br><span class="line">                &quot;/proc/keys&quot;,</span><br><span class="line">                &quot;/proc/latency_stats&quot;,</span><br><span class="line">                &quot;/proc/timer_list&quot;,</span><br><span class="line">                &quot;/proc/timer_stats&quot;,</span><br><span class="line">                &quot;/proc/sched_debug&quot;,</span><br><span class="line">                &quot;/proc/scsi&quot;,</span><br><span class="line">                &quot;/sys/firmware&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ReadonlyPaths&quot;: [</span><br><span class="line">                &quot;/proc/bus&quot;,</span><br><span class="line">                &quot;/proc/fs&quot;,</span><br><span class="line">                &quot;/proc/irq&quot;,</span><br><span class="line">                &quot;/proc/sys&quot;,</span><br><span class="line">                &quot;/proc/sysrq-trigger&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/ea0d40625eb312b3b786ba8591392cfaa7fcccac2342fbaffaf61e193a97ef10-init/diff:/var/lib/docker/overlay2/ae7ea40a5f676425498a213d349a33ae47279e6d967ca8ae68899fc318f4c691/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/ea0d40625eb312b3b786ba8591392cfaa7fcccac2342fbaffaf61e193a97ef10/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/ea0d40625eb312b3b786ba8591392cfaa7fcccac2342fbaffaf61e193a97ef10/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/ea0d40625eb312b3b786ba8591392cfaa7fcccac2342fbaffaf61e193a97ef10/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Mounts&quot;: [],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;2382115c04e3&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;while true; do echo kuangshen;sleep 1;done&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;org.label-schema.build-date&quot;: &quot;20201204&quot;,</span><br><span class="line">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class="line">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class="line">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">            &quot;SandboxID&quot;: &quot;3514405b5fa58af8745f6b646c42d14f63ec74f107d837f7f6b6b48f46cdcc6c&quot;,</span><br><span class="line">            &quot;HairpinMode&quot;: false,</span><br><span class="line">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class="line">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/3514405b5fa5&quot;,</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;0762e65693b6ee4a767c06ab4fa9f1c17177dd780c0bb08e0161995cb7ed94b2&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;d1738173ad84d5e4070c432a2342e7b5f95d1b47733599cc5a368ed2b660280e&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;0762e65693b6ee4a767c06ab4fa9f1c17177dd780c0bb08e0161995cb7ed94b2&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>* 进入当前正在运行的容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">命令</span></span><br><span class="line">docker exec -it 容器id /bin/bash</span><br><span class="line"><span class="meta"># </span><span class="language-bash">方式二</span></span><br><span class="line">docker attach 容器id</span><br><span class="line"><span class="meta"># </span><span class="language-bash">docker <span class="built_in">exec</span>         <span class="comment"># 进入容器后开启一个新的终端，可以在里面操作（常用）</span></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">docker attach      <span class="comment"># 进入容器正在执行的终端，不会启动新的进程！</span></span></span><br></pre></td></tr></table></figure><p>* <strong>从容器内拷贝文件到主机上</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp 容器id：容器内路径   目的的主机路径</span><br><span class="line"><span class="meta"># </span><span class="language-bash">查看当前主机目录下</span></span><br><span class="line">[root@iz2zegy1k4araknrzdo982z home]# ls</span><br><span class="line">admin  iz2zegy1k4araknrzdo982z.java  staragent  www</span><br><span class="line">[root@iz2zegy1k4araknrzdo982z home]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">07aec6b1e909   centos    &quot;/bin/bash&quot;   4 minutes ago   Up 4 minutes             vigilant_moore</span><br><span class="line"><span class="meta"># </span><span class="language-bash">进入docker容器内部</span></span><br><span class="line">[root@iz2zegy1k4araknrzdo982z home]# docker attach 07aec6b1e909</span><br><span class="line">[root@07aec6b1e909 ~]# cd /home</span><br><span class="line">[root@07aec6b1e909 home]# ls</span><br><span class="line"><span class="meta"># </span><span class="language-bash">在容器内新建一个文件</span></span><br><span class="line">[root@07aec6b1e909 home]# touch test.java</span><br><span class="line">[root@07aec6b1e909 home]# exit</span><br><span class="line">exit</span><br><span class="line">[root@iz2zegy1k4araknrzdo982z home]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@iz2zegy1k4araknrzdo982z home]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                      PORTS     NAMES</span><br><span class="line">07aec6b1e909   centos    &quot;/bin/bash&quot;   5 minutes ago   Exited (0) 15 seconds ago             vigilant_moore</span><br><span class="line"><span class="meta"># </span><span class="language-bash">将这个文件拷贝出来到主机上</span></span><br><span class="line">[root@iz2zegy1k4araknrzdo982z home]# docker cp 07aec6b1e909:/home/test.java /home</span><br><span class="line">[root@iz2zegy1k4araknrzdo982z home]# ls</span><br><span class="line">admin  iz2zegy1k4araknrzdo982z.java  staragent  test.java  www</span><br><span class="line">[root@iz2zegy1k4araknrzdo982z home]# </span><br><span class="line"><span class="meta"># </span><span class="language-bash">拷贝是一个手动过程，未来使用 -v 卷的技术可以做到</span></span><br></pre></td></tr></table></figure><h3 id="3-5-作业练习"><a href="#3-5-作业练习" class="headerlink" title="3.5 作业练习"></a>3.5 作业练习</h3><blockquote><p>Docker安装Nginx</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">1、搜索镜像          search         建议大家去docker搜索，可以看到帮助文档</span></span><br><span class="line">docker search nginx</span><br><span class="line"><span class="meta"># </span><span class="language-bash">2、下载镜像          pull</span></span><br><span class="line">docker pull nginx</span><br><span class="line"><span class="meta"># </span><span class="language-bash">3、运行测试</span></span><br><span class="line">[root@localhost /]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx              latest    f652ca386ed1   12 days ago    141MB</span><br><span class="line">centos            latest    5d0da3dc9764   2 months ago   231MB</span><br><span class="line"><span class="meta"># </span><span class="language-bash">-d   后台运行</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">--name   给容器命名</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">宿主机端口:容器内部端口</span></span><br><span class="line">[root@localhost /]# docker run -d --name nginx01 -p 3344:80 nginx</span><br><span class="line">b2f976d2f0636b64dce4cfd43661a978a82a3f53ae3ba127dda9861ad01f9681</span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS            NAMES</span><br><span class="line">b2f976d2f063   nginx     &quot;/docker-entrypoint.…&quot;   4 seconds ago   Up 4 seconds   0.0.0.0:3344-&gt;80/tcp, :::3344-&gt;80/tcp   nginx01</span><br><span class="line"><span class="meta"># </span><span class="language-bash">4、本机测试</span></span><br><span class="line">[root@localhost /]# curl localhost:3344</span><br><span class="line"><span class="meta"># </span><span class="language-bash">5、外网访问</span></span><br><span class="line">http://192.168.22.129:3344</span><br><span class="line"><span class="meta"># </span><span class="language-bash">6、进入容器</span></span><br><span class="line">[root@localhost /]# docker exec -it nginx01 /bin/bash</span><br><span class="line">root@b2f976d2f063:/# whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class="line">root@b2f976d2f063:/# cd /etc/nginx</span><br><span class="line">root@b2f976d2f063:/etc/nginx# ls</span><br><span class="line">conf.d        mime.types  nginx.conf     uwsgi_params     fastcgi_params    modules     scgi_params</span><br><span class="line"><span class="meta"># </span><span class="language-bash">退出容器</span></span><br><span class="line">root@b2f976d2f063:/etc/nginx# exit</span><br><span class="line">exit</span><br><span class="line"><span class="meta"># </span><span class="language-bash">停止docker容器</span></span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS          NAMES</span><br><span class="line">b2f976d2f063   nginx     &quot;/docker-entrypoint.…&quot;   22 minutes ago   Up 22 minutes   0.0.0.0:3344-&gt;80/tcp, :::3344-&gt;80/tcp   nginx01</span><br><span class="line">[root@localhost /]# docker stop b2f976d2f063</span><br><span class="line">b2f976d2f063</span><br></pre></td></tr></table></figure><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudyff456e2e-cb9b-45ff-afd4-88d1c2f6e50b.png" alt="img"></p><p>- 思考问题：每次改动nginx配置文件，都需要进入容器内部，若可以在容器外部提供一个映射路径，若容器外修改，那么容器内可以自动修改—— <strong>-v 数据卷</strong></p><blockquote><p>Docker安装Tomcat</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">官方的使用</span></span><br><span class="line">docker run -it --rm tomcat:9.0</span><br><span class="line"><span class="meta"># </span><span class="language-bash">之前的启动都是后台，停止了容器之后，容器还是可以查到。docker run -it --<span class="built_in">rm</span>，一般用来测试，用完就删除</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">先下载再启动</span></span><br><span class="line">docker pull tomcat</span><br><span class="line"><span class="meta"># </span><span class="language-bash">启动运行</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">-d   后台运行</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">--name   给容器命名</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">宿主机端口:容器内部端口</span></span><br><span class="line">docker run -d -p 3355:8080 --name tomcat01 tomcat</span><br><span class="line"><span class="meta"># </span><span class="language-bash">测试访问没有问题</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">进入容器</span></span><br><span class="line">[root@localhost ~]# docker exec -it tomcat01 /bin/bash</span><br><span class="line"><span class="meta"># </span><span class="language-bash">发现问题，linux命令少了，没有webapps，阿里云镜像的原因，默认是最小的镜像，所有不必要的都剔除了</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">文件都在webapps.dist中，将webapps.dist中的文件拷贝到webapps中</span></span><br><span class="line">root@f0cfd5823fc5:/usr/local/tomcat/webapps# cp -r webapps.dist/* webapps</span><br><span class="line"><span class="meta"># </span><span class="language-bash">外网可以访问</span></span><br><span class="line">http://192.168.22.129:3355/</span><br></pre></td></tr></table></figure><p>- 思考问题：以后部署项目，每次都要进入容器十分麻烦。若可以在容器外部提供一个映射路径，webapps，在外部放置项目，自动同步到内部就好了。</p><blockquote><p>部署es + kibana</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">es 暴露的端口很多且十分耗内存</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">es 的数据一般需要放置到安全目录</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">--net somenetwork     网络配置</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">启动elasticsearch</span></span><br><span class="line">docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.6.2</span><br><span class="line"><span class="meta"># </span><span class="language-bash">启动后linux都变卡了     docker stats——查看CPU的状态</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">es是十分耗内存的，一点几个G</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">停止tomcat</span></span><br><span class="line">docker stop tomcatID</span><br><span class="line"><span class="meta"># </span><span class="language-bash">查看docker stats</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">测试一下es是否成功</span></span><br><span class="line">curl localhost:9200</span><br><span class="line"><span class="meta"># </span><span class="language-bash">成功后关闭，增加内存限制——修改配置文件   -e   环境配置文件修改</span></span><br><span class="line">docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.6.2</span><br></pre></td></tr></table></figure><h2 id="4-Portainer可视化面板安装"><a href="#4-Portainer可视化面板安装" class="headerlink" title="4 Portainer可视化面板安装"></a>4 Portainer可视化面板安装</h2><blockquote><p>什么是Portainer？</p></blockquote><p>Docker图形化界面管理工具！提供一个后台面板供我们操作</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">安装命令</span></span><br><span class="line">docker run -d -p 8088:9000 \</span><br><span class="line">--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br><span class="line"><span class="meta"># </span><span class="language-bash">外网访问</span></span><br><span class="line">http://192.168.22.129:8088</span><br></pre></td></tr></table></figure><p>1.输入密码创建用户</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudy4541e7d5-cdcb-4aa0-b6ca-5668b3fd48be.jpg" alt="img"></p><p>2.选择本地连接</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudy27b5f0eb-332b-45ee-8c41-efc5024e9d94.png" alt="img"></p><p>3.进入主页</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudyd5732fe5-2233-4cc4-b62b-b9688a898aa7.png" alt="img"></p><p>4.这个可视化面板平时不会用，测试玩玩即可</p><h2 id="5-Docker镜像讲解"><a href="#5-Docker镜像讲解" class="headerlink" title="5 Docker镜像讲解"></a>5 Docker镜像讲解</h2><h3 id="5-1-镜像是什么"><a href="#5-1-镜像是什么" class="headerlink" title="5.1 镜像是什么"></a>5.1 镜像是什么</h3><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><p><strong>所有应用，直接打包成Docker镜像，就能直接跑起来。</strong></p><blockquote><p>如何得到镜像？</p></blockquote><ul><li>从远程仓库下载</li><li>别人拷贝</li><li>自己制作一个镜像DockerFile</li></ul><h3 id="5-2-Docker镜像加载原理"><a href="#5-2-Docker镜像加载原理" class="headerlink" title="5.2 Docker镜像加载原理"></a>5.2 Docker镜像加载原理</h3><blockquote><p>UnionFS(联合文件系统)</p></blockquote><p>UnionFS(联合文件系统)：Union文件系统(UnionFS)是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像(没有父镜像)，可以制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><blockquote><p>Docker镜像加载原理</p></blockquote><p>Docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p><p>Bootfs(Boot File System)主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载Bootfs文件系统，在Docker镜像的最底层是Bootfs。这一层与我们典型的Linux&#x2F;Unix系统是一样的，包含Boot加载器和内核。当Boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由Bootfs转交给内核，此时系统也会卸载Bootfs。</p><p>Rootfs(Root File System)，在Bootfs之上。包含的就算典型Linux系统中的&#x2F;dev，&#x2F;proc，&#x2F;bin，&#x2F;etc等标准目录和文件。Rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudydeba71bc-9e4f-418b-8f64-8518097d8f4a.png" alt="img"></p><p>平时安装进虚拟机的CentOS都是好几个G，为什么Docker里才200M？</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudy789c880c-2be2-4442-b200-3dfccfa059e8.png" alt="img"></p><p>对于一个精简的OS，Rootfs可以很小，只需要包含最基本的命令，工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供Rootfs就可以了。由此可见对于不同的Linux发行版，Bootfs基本是一致是，Rootfs会有差别，因此不同的发行版可以公用Bootfs。</p><h3 id="5-3-分层理解"><a href="#5-3-分层理解" class="headerlink" title="5.3 分层理解"></a>5.3 分层理解</h3><blockquote><p>分层的镜像</p></blockquote><p>下载一个镜像，注意观察下载的日志输出，可以看到是一层一层的在下载。</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudy3a911a14-9b4e-41d9-aed9-c9977edba1f7.png" alt="img"></p><p>- 思考：为什么Docker镜像要采用这种分层的结构呢？</p><p>最大的好处是资源共享，比如有多个镜像都从相同的Base镜像构建而来，那么宿主机只需在磁盘上保留一份Base镜像，同时内存中也只需要加载一份Base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p><p>查看镜像分层的方式可以通过<code>docker image inspect</code>命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker image inspect redis:latest</span><br><span class="line">[</span><br><span class="line">    // ... ...</span><br><span class="line">        &quot;RootFS&quot;: &#123;</span><br><span class="line">            &quot;Type&quot;: &quot;layers&quot;,</span><br><span class="line">            &quot;Layers&quot;: [</span><br><span class="line">                &quot;sha256:9321ff862abbe8e1532076e5fdc932371eff562334ac86984a836d77dfb717f5&quot;,</span><br><span class="line">                &quot;sha256:aa2858ea5edc9c0981901a1b63b49a8f4a6e7099b4304b49e680ffdcc6b71b3e&quot;,</span><br><span class="line">                &quot;sha256:93079bf13a6d5fe7c4bd9f00cb96183f9d1db9968c4bd15b395df2f3867bf8e5&quot;,</span><br><span class="line">                &quot;sha256:9ca504b88e256aa6f6c04ec65aeeed6b926661ea30a0b97f829fbe230155241a&quot;,</span><br><span class="line">                &quot;sha256:9468a3f0498bd5cc298ce25ea6ce9c6adf14aa2ce152856b5f389510a9bb9e01&quot;,</span><br><span class="line">                &quot;sha256:b7851a62867d82784052d7662862adc0b47b2bddcddc89ae78307f75ba1b29ae&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Metadata&quot;: &#123;</span><br><span class="line">            &quot;LastTagTime&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>理解：</strong></p><p>所有的Docker镜像都起始于一个基础镜像层，当进行修改或增加新内容时，就会在当前镜像层之上，创建新的镜像层。</p><p>例如，假如基于Ubuntu Linux16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。</p><p>该镜像当前已经包含3个镜像层，如下图所示（这只是一个用于演示的很简单的例子）。</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudy7fbb9de9-d35d-4e7f-96cc-e607bdc589e7.png" alt="img"></p><p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了一个简单的例子，每个镜像层包含了3个文件，而镜像包含了来自两个镜像层的6个文件。</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudy80640ab7-31da-4e26-aed7-ba8b5b95b4da.png" alt="img"></p><p>上图中的镜像层跟之前途中的略有区别，主要目的是便于展示文件。</p><p>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为上层中的文件7是文件5的一个更新版本。</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudy516b0ce6-4530-4181-aae8-f6ce4252a9bf.png" alt="img"></p><p>这种情况下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新镜像层添加到镜像当中。</p><p>Docker通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一的文件系统。</p><p>Linux上可用的存储引擎有AUFS、Overlay2、Device Mapper、Btrfs以及ZFS。顾名思义，每种存储引擎都基于Linux中对应的文件系统或者块设备技术，并且每种存储引擎都有其独有的性能特点。</p><p>Docker在Windows上仅支持windowsfilter一种存储引擎，该引擎基于NTFS文件系统之上实现了分层和CoW。</p><p>下图展示了与系统展示相同的三层镜像。所有镜像层堆叠并合并，对外提供统一的视图。</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudya44ceb1e-d988-4ecb-8853-8d22e97ec5a9.png" alt="img"></p><blockquote><p>特点</p></blockquote><p>Docker镜像都是只读的，当容器启动的，一个新的可写层被加载到镜像的顶部！</p><p>这一层就是我们通常说的容器层，容器之下的都叫镜像层！</p><p>如何提交一个自己的镜像——</p><h2 id="6-Commit镜像"><a href="#6-Commit镜像" class="headerlink" title="6 Commit镜像"></a>6 Commit镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit     提交容器成为一个新的副本</span><br><span class="line"><span class="meta"># </span><span class="language-bash">命令和git类似</span></span><br><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</span><br></pre></td></tr></table></figure><blockquote><p>实战测试</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">启动一个默认的tomcat</span></span><br><span class="line">docker run -it -p 8080:8080 tomcat</span><br><span class="line"><span class="meta"># </span><span class="language-bash">进入容器</span></span><br><span class="line">docker exec -it dde8846b0c72 /bin/bash</span><br><span class="line"><span class="meta"># </span><span class="language-bash">发现这个默认的tomcat是没有webapps应用，拷贝进去基本的文件</span></span><br><span class="line">cp -r webapps.dist/* webapps</span><br><span class="line"><span class="meta"># </span><span class="language-bash">将操作过的容器通过commit提交为一个新的镜像，以后使用修改过的镜像即可，这是一个修改过的镜像</span></span><br><span class="line">docker commit -a=&quot;candy&quot; -m=&quot;add webapps app&quot; dde8846b0c72 tomcat02:1.0</span><br></pre></td></tr></table></figure><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/21/kuangstudyc0d74175-6523-4812-b9d1-5db6b770498d.png" alt="img"></p><p>- 方式说明：若想要保存当前容器的状态，就可以通过commit来提交，获得一个镜像。</p><h2 id="7-容器数据卷"><a href="#7-容器数据卷" class="headerlink" title="7 容器数据卷"></a>7 容器数据卷</h2><h3 id="7-1-什么是容器数据卷"><a href="#7-1-什么是容器数据卷" class="headerlink" title="7.1 什么是容器数据卷"></a>7.1 什么是容器数据卷</h3><blockquote><p>Docker的理念回顾</p></blockquote><p>将应用和环境打包成一个镜像。</p><p>如果数据都在容器中，那么容器删除，数据就会丢失！<strong>需求：数据可以持久化</strong></p><p>MySQL，容器删了，删库跑路！<strong>需求：MySQL数据可以存储在本地</strong></p><p>容器之间可以有一个数据共享的技术，Docker容器中产生的数据，同步到本地</p><p>这就是卷技术，目录的挂载，将容器内的目录，挂载到Linux上面</p><p>&#x3D;&#x3D;容器的持久化和同步操作，容器间可以数据共享&#x3D;&#x3D;</p><h3 id="7-2-使用数据卷"><a href="#7-2-使用数据卷" class="headerlink" title="7.2 使用数据卷"></a>7.2 使用数据卷</h3><blockquote><p>方式一：直接使用命令来挂载 -v</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -v -p 主机端口:容器内端口</span><br><span class="line"><span class="meta"># </span><span class="language-bash">测试</span></span><br><span class="line">[root@localhost ~]# docker run -it -v /home/ceshi:/home centos /bin/bash</span><br><span class="line"><span class="meta"># </span><span class="language-bash">启动起来的时候通过docker inspect 容器<span class="built_in">id</span></span></span><br><span class="line">[root@localhost home]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND        CREATED         STATUS         PORTS                    </span><br><span class="line">ec2791f8641d   centos                &quot;/bin/bash&quot;    2 minutes ago   Up 2 minutes                            n</span><br><span class="line">032a87ad5797   portainer/portainer   &quot;/portainer&quot;   7 hours ago     Up 7 hours     0.0.0.0:8088-&gt;9000/tcp, :enberg</span><br><span class="line">[root@localhost home]# docker inspect ec2791f8641d</span><br></pre></td></tr></table></figure><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/27/kuangstudy76f3fc9d-4000-419c-a5a8-67124b550f76.png" alt="数据卷"></p><ol><li>测试文件同步：同步过程，双向绑定。</li></ol><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/27/kuangstudyc65d1509-6e92-4fd9-ab63-e3cc9620238b.png" alt="数据卷"></p><ol><li>接着测试</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">先停掉容器</span></span><br><span class="line">[root@ec2791f8641d home]# exit</span><br><span class="line">exit</span><br><span class="line"><span class="meta"># </span><span class="language-bash">在宿主机中修改test.java</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">重新启动容器，发现虽然之前停止了容器，但是宿主机中修改了，容器中会同步修改</span></span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS                        PORTS                                       NAMES</span><br><span class="line">ec2791f8641d   centos                &quot;/bin/bash&quot;              25 minutes ago   Exited (0) 4 minutes ago                                                  sharp_robinson</span><br><span class="line">[root@localhost ~]# docker start ec2791f8641d</span><br><span class="line">ec2791f8641d</span><br><span class="line">[root@localhost ~]# docker attach ec2791f8641d</span><br><span class="line">[root@ec2791f8641d /]# cd /home</span><br><span class="line">[root@ec2791f8641d home]# ls</span><br><span class="line">test.java</span><br><span class="line">[root@ec2791f8641d home]# vi test.java</span><br></pre></td></tr></table></figure><p>- 好处：以后修改只需要在本地中修改即可，容器内会自动同步。</p><h3 id="7-3-安装MySQL"><a href="#7-3-安装MySQL" class="headerlink" title="7.3 安装MySQL"></a>7.3 安装MySQL</h3><p>- 思考：MySQL的数据持久化的问题</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">获取镜像</span></span><br><span class="line">[root@localhost home]# docker pull mysql:5.7</span><br><span class="line"><span class="meta"># </span><span class="language-bash">运行容器，需要做数据挂载</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">安装启动mysql，需要配置密码！！！</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">官方测试</span></span><br><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class="line"><span class="meta"># </span><span class="language-bash">启动</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">-d  后台运行</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">-p  端口映射</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">-v  卷挂载</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">-e  环境配置</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">--name  容器名字</span></span><br><span class="line">[root@localhost home]# docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"><span class="meta"># </span><span class="language-bash">启动成功之后，在本地使用Navicat连接测试</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Navicat--连接到服务器的3310--3310和容器内的3306映射，这个时候就可以连接上了</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">在本地测试创建一个数据库，查看映射的路径是否同步</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">将容器删除后发现，挂载到本地的数据卷依旧没有丢失，实现了容器数据持久化功能</span></span><br></pre></td></tr></table></figure><h3 id="7-4-具名和匿名挂载"><a href="#7-4-具名和匿名挂载" class="headerlink" title="7.4 具名和匿名挂载"></a>7.4 具名和匿名挂载</h3><blockquote><p>匿名挂载</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">匿名挂载</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">-v 容器内路径，-P 随机映射端口</span></span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"><span class="meta"># </span><span class="language-bash">查看所有卷volume的情况</span></span><br><span class="line">[root@localhost home]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     99e9e02fb5b08234a3d40f5d681fb6779a358a460c553d3387ef25d4ec4f2491</span><br><span class="line">local     c9ebbbbe6585eb1cd70f951dca8ddf81a7b20a0b55d4c38b950fc2444d6293ad</span><br><span class="line"><span class="meta"># </span><span class="language-bash">没有给卷起名字就是匿名挂载，-v只些了容器内的路径，没有写本地路径</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">具名挂载</span></span><br><span class="line">[root@localhost home]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class="line">412cf3a4511eb90673dda7018be8343f168481a055cd338f296a64b56c6c912f</span><br><span class="line">[root@localhost home]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     juming-nginx</span><br><span class="line"><span class="meta"># </span><span class="language-bash">通过-v 卷名:容器内路径</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">查看卷</span></span><br><span class="line">[root@localhost home]# docker volume inspect juming-nginx</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2021-12-15T09:06:57+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: null,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/juming-nginx/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;juming-nginx&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>所有的docker容器内的卷，没有指定目录的情况下都是在<code>/var/lib/docker/volumes/xxxx/_data</code></p><p>通过具名挂载可以方便地找到一个卷，大多数情况在使用地都是&#x3D;&#x3D;具名挂载&#x3D;&#x3D;</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">如何确定是具名挂载还是匿名挂载，还说指定路径挂载</span></span><br><span class="line">-v 容器内路径                       # 匿名挂载</span><br><span class="line">-v 卷名:容器内路径               # 具名挂载</span><br><span class="line">-v /宿主机路径:容器内路径   # 指定路径挂载</span><br></pre></td></tr></table></figure><p>- 拓展：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">通过-v 容器内路径:ro/rw 改变读写权限</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">ro:<span class="built_in">readonly</span>    只读</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">rw:readwrite  可读可写</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">一旦这个设置了容器权限，容器对我们挂载出来的就有限定了</span></span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:rw nginx</span><br><span class="line"><span class="meta"># </span><span class="language-bash">只要看到ro就说明这个路径只能通过宿主机操作，容器内部无法操作</span></span><br></pre></td></tr></table></figure><h3 id="7-5-初识Dockerfile"><a href="#7-5-初识Dockerfile" class="headerlink" title="7.5 初识Dockerfile"></a>7.5 初识Dockerfile</h3><p>Dockerfile就是用来构建Docker镜像的构建文件，命令脚本</p><p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本一个个的命令，每个命令都是一层</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">创建一个dockerfile文件，文件可以随机，但是建议叫Dockerfile</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">文件中的内容   指令   参数</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">以下为文件内容</span></span><br><span class="line">FROM centos</span><br><span class="line">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class="line">CMD echo &quot;----end----&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line">docker bulid -f dockerfile1 -t /candy/centos</span><br><span class="line"><span class="meta"># </span><span class="language-bash">这里的每个命令，就是镜像的一层！</span></span><br></pre></td></tr></table></figure><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/27/kuangstudy6f4311b1-bfc9-48f9-b47d-efd8de611766.png" alt="Dockerfile"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">启动自己容器</span></span><br><span class="line">[root@localhost ~]# docker run -it b63b253b20aa /bin/bash</span><br><span class="line">[root@574f1c6fbf08 /]# ls -l</span><br><span class="line">... ...</span><br><span class="line">drwxr-xr-x.   2 root root   6 Dec 15 03:59 volume01     # 生成镜像时自动挂载的，数据卷目录</span><br><span class="line">drwxr-xr-x.   2 root root   6 Dec 15 03:59 volume02     # 生成镜像时自动挂载的，数据卷目录</span><br></pre></td></tr></table></figure><p>这个卷和外部一定有一个同步的目录<code>VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</code>匿名挂载</p><p>查看一下卷挂载的路径</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker inspect 52f82658de9f</span><br><span class="line">... ...</span><br><span class="line">        &quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;54bf1866ca5a15d65b12b651e434a3c8ded06d2ff41d1eb030473cd858edeaf6&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/54bf1866ca5a15d65b12b651e434a3c8ded06d2ff41d1eb030473cd858edeaf6/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;volume01&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;aa602f2da1f83b9f906b6d59e02ac42d3f5a9b0ce7ec860b7b8f0a34b77f112a&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/aa602f2da1f83b9f906b6d59e02ac42d3f5a9b0ce7ec860b7b8f0a34b77f112a/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;volume02&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        ... ...</span><br><span class="line"><span class="meta"># </span><span class="language-bash">进入容器新建一个文件</span></span><br><span class="line">[root@localhost ~]# docker run -it b63b253b20aa /bin/bash</span><br><span class="line">[root@52f82658de9f /]# cd volume01</span><br><span class="line">[root@52f82658de9f volume01]# touch container.txt</span><br><span class="line"><span class="meta"># </span><span class="language-bash">测试一下新建的文件是否同步出去</span></span><br><span class="line">[root@localhost ~]# cd /var/lib/docker/volumes/54bf1866ca5a15d65b12b651e434a3c8ded06d2ff41d1eb030473cd858edeaf6/_data</span><br><span class="line">[root@localhost _data]# ls</span><br><span class="line">container.txt</span><br></pre></td></tr></table></figure><p>假设构建镜像时没有挂载卷，要手动镜像挂载。-v 卷名:容器内路径</p><h3 id="7-6-数据卷容器"><a href="#7-6-数据卷容器" class="headerlink" title="7.6 数据卷容器"></a>7.6 数据卷容器</h3><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/27/kuangstudy21c0d7b6-1937-4ba4-a73d-c6c5ffb8c7ff.png" alt="数据容器卷"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">启动3个容器，通过刚才写的镜像启动docker01</span></span><br><span class="line">[root@localhost ~]# docker run -it --name docker01 candy/centos:1.0</span><br><span class="line">[root@ad03105f62e9 /]# ls</span><br><span class="line">bin  etc   lib      lost+found  mnt  proc  run   srv  tmp  var       volume02</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr  volume01</span><br><span class="line">[root@ad03105f62e9 /]# ls -l</span><br><span class="line">... ...</span><br><span class="line">drwxr-xr-x.   2 root root   6 Dec 15 05:50 volume01</span><br><span class="line">drwxr-xr-x.   2 root root   6 Dec 15 05:50 volume02</span><br><span class="line"><span class="meta"># </span><span class="language-bash">创建docker02(02挂载了01，01被称为数据卷容器)，docker02拥有docker01的目录</span></span><br><span class="line">[root@localhost ~]# docker run -it --name docker02 --volumes-from docker01 candy/centos:1.0</span><br><span class="line">[root@655dfe00f902 /]# ls -l</span><br><span class="line">... ...</span><br><span class="line">drwxr-xr-x.   2 root root   6 Dec 15 05:50 volume01</span><br><span class="line">drwxr-xr-x.   2 root root   6 Dec 15 05:50 volume02</span><br><span class="line"><span class="meta"># </span><span class="language-bash">在docker01的目录中创建内容</span></span><br><span class="line">[root@localhost ~]# docker attach ad03105f62e9</span><br><span class="line">[root@ad03105f62e9 /]# cd volume01</span><br><span class="line">[root@ad03105f62e9 volume01]# ls</span><br><span class="line">[root@ad03105f62e9 volume01]# touch docker01</span><br><span class="line">[root@ad03105f62e9 volume01]# ls</span><br><span class="line">docker01</span><br><span class="line"><span class="meta"> # </span><span class="language-bash">会同步到docker02中</span></span><br><span class="line">[root@655dfe00f902 /]# cd volume01</span><br><span class="line">[root@655dfe00f902 volume01]# ls</span><br><span class="line">docker01</span><br><span class="line"><span class="meta"># </span><span class="language-bash">创建docker03，docker03同样拥有docker01的目录和内容</span></span><br><span class="line">[root@localhost _data]# docker run -it --name docker03 --volumes-from docker01 candy/centos:1.0</span><br><span class="line">[root@dba571b389d4 /]# cd volume01</span><br><span class="line">[root@dba571b389d4 volume01]# ls</span><br><span class="line">docker01</span><br><span class="line"><span class="meta"># </span><span class="language-bash">在docker03的目录中创建内容</span></span><br><span class="line">[root@dba571b389d4 volume01]# touch docker03</span><br><span class="line">[root@dba571b389d4 volume01]# ls</span><br><span class="line">docker01  docker03</span><br><span class="line"><span class="meta"># </span><span class="language-bash">会同步到docker01中</span></span><br><span class="line">[root@ad03105f62e9 volume01]# ls</span><br><span class="line">docker01  docker03</span><br></pre></td></tr></table></figure><p>只要通过<code>--volumes-from</code>就可以实现容器间的共享</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">测试：可以删除docker01，查看一下docker02和docker03是否还可以访问这个文件</span></span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND                 CREATED              STATUS               NAMES</span><br><span class="line">dba571b389d4  candy/centos:1.0  &quot;/bin/sh -c /bin/bash&quot;  33 minutes ago   Up 33 minutes    docker03</span><br><span class="line">655dfe00f902   candy/centos:1.0   &quot;/bin/sh -c /bin/bash&quot;   47 minutes ago  Up 47 minutes    docker02</span><br><span class="line">ad03105f62e9   candy/centos:1.0   &quot;/bin/sh -c /bin/bash&quot;   ... ...                                                docker01</span><br><span class="line">[root@localhost ~]# docker rm -f ad03105f62e9</span><br><span class="line">ad03105f62e9</span><br><span class="line"><span class="meta"># </span><span class="language-bash">测试依旧可访问</span></span><br><span class="line">[root@dba571b389d4 volume01]# ls</span><br><span class="line">docker01  docker03</span><br></pre></td></tr></table></figure><blockquote><p>多个mysql实现数据共享</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost home]# docker run -d -p 3310:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line">[root@localhost home]# docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-form mysql01 mysql:5.7</span><br><span class="line"><span class="meta"># </span><span class="language-bash">这个时候可以实现两个容器数据同步</span></span><br></pre></td></tr></table></figure><p>结论：</p><p>容器之间配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止。</p><p>但是一旦持久化到本地，本地的数据是不会删除的。</p><h2 id="8-DockerFile"><a href="#8-DockerFile" class="headerlink" title="8 DockerFile"></a>8 DockerFile</h2><p>DockerFile是用来构建Docker镜像的文件，是命令参数脚本。</p><h3 id="8-1-DockerFile介绍"><a href="#8-1-DockerFile介绍" class="headerlink" title="8.1 DockerFile介绍"></a>8.1 DockerFile介绍</h3><blockquote><p>构建步骤</p></blockquote><ul><li>编写一个DockerFile文件</li><li><code>docker build</code>构建成为一个镜像</li><li><code>docker run</code>运行镜像</li><li><code>docker push</code>发布镜像（DockerHub、阿里云镜像仓库）</li></ul><blockquote><p>查看官方的DockerFile</p></blockquote><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/27/kuangstudyf288b6d8-51c3-4213-b6d6-ef8f4d30d362.png" alt="Dockerfile"></p><p>官方镜像都是基础包，很多功能没有，可以自己搭建自己的镜像</p><p>官方既然可以制作镜像，我们也可以</p><h3 id="8-2-DockerFile构建过程"><a href="#8-2-DockerFile构建过程" class="headerlink" title="8.2 DockerFile构建过程"></a>8.2 DockerFile构建过程</h3><blockquote><p>基础知识</p></blockquote><p>1、每个保留关键字（指令）都必须是大写字母</p><p>2、执行从上到下顺序执行</p><p>3、# 表示注释</p><p>4、每一个指令都会创建提交一个新的镜像层，并提交</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/27/kuangstudyd0ed0707-a816-4d36-9ec5-f94c60caefc6.png" alt="Dockerfile"></p><p>DockerFile是面向开发的，以后发布项目，做镜像，就需要编写DockerFile文件，这个文件十分简单</p><p>Docker镜像逐渐成为企业交付的标准，必须要掌握</p><p>步骤：开发、部署、运维，缺一不可</p><p>DockerFile构建文件，定义一切的步骤，源代码</p><p>DockerImages通过DockerFile构架生成的镜像，最终发布和运行的产品</p><p>Docker容器就是镜像运行起来提供服务</p><h3 id="8-3-DockerFile指令"><a href="#8-3-DockerFile指令" class="headerlink" title="8.3 DockerFile指令"></a>8.3 DockerFile指令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM                   # 基础镜像，一切从这里开始构建    CentOS</span><br><span class="line">MAINTAINER       # 镜像是谁写的，姓名+邮箱</span><br><span class="line">RUN                     # 镜像构建的时候需要运行的命令</span><br><span class="line">ADD                     # 步骤，tomcat镜像，tomcat压缩包，添加内容</span><br><span class="line">WORKDIR            # 镜像的工作目录</span><br><span class="line">VOLUME              # 挂载的目录</span><br><span class="line">EXPOSE                # 保留端口配置</span><br><span class="line">CMD                     # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT       # 指定这个容器启动的时候要运行的命令，可以追加命令</span><br><span class="line">ONBULID             # 当构建一个被继承 DockerFile 这个时候就会运行 ONBULID 指令，触发指令</span><br><span class="line">COPY                    # 类似ADD，将我们文件拷贝到镜像中</span><br><span class="line">ENV                      # 构建的时候设置环境变量</span><br></pre></td></tr></table></figure><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/27/kuangstudycb4654a2-9447-4aa5-8226-2e64b11d588b.png" alt="Dockerfile"></p><h3 id="8-4-实战测试"><a href="#8-4-实战测试" class="headerlink" title="8.4 实战测试"></a>8.4 实战测试</h3><p>Docker Hub中99%镜像都是从这个基础镜像过来的<code>FROM scratch</code>，然后配置需要的软件和配置来进行的构建</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/27/kuangstudy2eb7d22a-95ad-4ad1-bf1d-68a31c0bb875.png" alt="Dockerfile"></p><blockquote><p>创建一个自己的Centos</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">1、编写Dockerfile文件</span></span><br><span class="line">[root@localhost dockerfile]# cat mydockerfile-centos </span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER candy&lt;2019704946@qq.com&gt;</span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;----end----&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta"># </span><span class="language-bash">2、通过文件构建镜像</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">命令 docker build -f dockerfile文件路径 -t 镜像名:[tag]</span></span><br><span class="line">[root@localhost dockerfile]# docker build -f mydockerfile-centos -t mycentos:0.1 .</span><br><span class="line">Successfully built 1bd5d6b9029c</span><br><span class="line">Successfully tagged mycentos:0.1</span><br><span class="line"><span class="meta"># </span><span class="language-bash">3、测试运行</span></span><br></pre></td></tr></table></figure><p>对比：之前的原生的centos</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/27/kuangstudy0cc2dfd3-27d0-414e-b965-0cb22f122809.jpg" alt="Dockerfile"></p><p>我们增加之后的镜像</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/27/kuangstudy80bd9915-9dac-4bc0-b333-10dda20680ab.png" alt="Dockerfile"></p><p>可以列出镜像的变更历史</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/27/kuangstudybed169cc-e21b-4f7d-bcdf-5af0e18bc7d4.png" alt="Dockerfile"></p><p>拿到镜像可以研究它是怎么做的了</p><blockquote><p>CMD 和 ENTRYPOINT 区别</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CMD                 # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT    # 指定这个容器启动的时候要运行的命令，可以追加命令</span><br></pre></td></tr></table></figure><p><strong>- 测试CMD</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">编写 dockerfile 文件</span></span><br><span class="line">[root@localhost dockerfile]# vi dockerfile-cmd-test</span><br><span class="line">[root@localhost dockerfile]# cat dockerfile-cmd-test </span><br><span class="line">FROM centos</span><br><span class="line">CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta"># </span><span class="language-bash">执行镜像</span></span><br><span class="line">[root@localhost dockerfile]# docker build -f dockerfile-cmd-test -t cmdtest .</span><br><span class="line"><span class="meta"># </span><span class="language-bash">run运行，发现 <span class="built_in">ls</span> -a 命令生效</span></span><br><span class="line">[root@localhost dockerfile]# docker run cdfec2267f91</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"><span class="meta"># </span><span class="language-bash">追加一个命令 -l ，期望的是返回 <span class="built_in">ls</span> -al</span> </span><br><span class="line">[root@localhost dockerfile]# docker run cdfec2267f91 -l</span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: exec: &quot;-l&quot;: executable file not found in $PATH: unknown.</span><br><span class="line"><span class="meta"># </span><span class="language-bash">cmd的情况下 -l 替换了 CMD [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>] 命令，-l 不是命令，所以报错</span></span><br></pre></td></tr></table></figure><p><strong>- 测试ENTRYPOINT</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">编写 dockerfile 文件</span></span><br><span class="line">[root@localhost dockerfile]# vi dockerfile-cmd-entrypoint</span><br><span class="line">[root@localhost dockerfile]# cat dockerfile-cmd-entrypoint </span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta"># </span><span class="language-bash">执行镜像</span></span><br><span class="line">[root@localhost dockerfile]# docker build -f dockerfile-cmd-entrypoint -t entrypoint-test .</span><br><span class="line"><span class="meta"># </span><span class="language-bash">run运行，发现 <span class="built_in">ls</span> -a 命令生效</span></span><br><span class="line">[root@localhost dockerfile]# docker run b28114dc40da</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"><span class="meta"># </span><span class="language-bash">追加一个命令 -l ，是直接拼接在 ENTRYPOINT 命令的后边</span></span><br><span class="line">[root@localhost dockerfile]# docker run b28114dc40da -l</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x.   1 root root   6 Dec 15 19:27 .</span><br><span class="line">drwxr-xr-x.   1 root root   6 Dec 15 19:27 ..</span><br><span class="line">-rwxr-xr-x.   1 root root   0 Dec 15 19:27 .dockerenv</span><br><span class="line">lrwxrwxrwx.   1 root root   7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x.   5 root root 340 Dec 15 19:27 dev</span><br><span class="line">drwxr-xr-x.   1 root root  66 Dec 15 19:27 etc</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 home</span><br><span class="line">lrwxrwxrwx.   1 root root   7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx.   1 root root   9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------.   2 root root   6 Sep 15 14:17 lost+found</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 media</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 mnt</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 opt</span><br><span class="line">dr-xr-xr-x. 123 root root   0 Dec 15 19:27 proc</span><br><span class="line">dr-xr-x---.   2 root root 162 Sep 15 14:17 root</span><br><span class="line">drwxr-xr-x.  11 root root 163 Sep 15 14:17 run</span><br><span class="line">lrwxrwxrwx.   1 root root   8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 srv</span><br><span class="line">dr-xr-xr-x.  13 root root   0 Dec 12 16:49 sys</span><br><span class="line">drwxrwxrwt.   7 root root 171 Sep 15 14:17 tmp</span><br><span class="line">drwxr-xr-x.  12 root root 144 Sep 15 14:17 usr</span><br><span class="line">drwxr-xr-x.  20 root root 262 Sep 15 14:17 var</span><br></pre></td></tr></table></figure><p>Dockerfile中很多命令都十分的相似，我们需要了解他们的区别，最好的学习就是对比他们然后测试效果</p><h3 id="8-5-Tomcat镜像实战"><a href="#8-5-Tomcat镜像实战" class="headerlink" title="8.5 Tomcat镜像实战"></a>8.5 Tomcat镜像实战</h3><blockquote><p>1、准备镜像文件Tomcat压缩包，JDK压缩包</p></blockquote><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/27/kuangstudyef0d45c5-e2dc-479f-a22f-229cc355fe3e.png" alt="Dockerfile"></p><blockquote><p>2、编写Dockerfile文件，官方命名&#x3D;&#x3D;Dockerfile&#x3D;&#x3D;，build会自动寻找这个文件，就不需要-f指定了</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER candy&lt;2019704946@qq.com&gt;</span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line">ADD jdk-8u11-linux-x64.tar.gz /usr/local/</span><br><span class="line">ADD apache-tomcat-9.0.22.tar.gz /usr/local/</span><br><span class="line"><span class="meta"># </span><span class="language-bash">RUN yum -y install vim</span></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_11</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/rt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.22</span><br><span class="line">ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.22</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line">EXPOSE 8080</span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.22/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.22/logs/catalina.out</span><br></pre></td></tr></table></figure><blockquote><p>3、构建镜像</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost tomcat]# docker build -t diytomcat .</span><br></pre></td></tr></table></figure><blockquote><p>4、启动镜像</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动镜像</span><br><span class="line">[root@localhost tomcat]# docker run -d -p 9090:8080 --name candytomcat -v /home//home/tomcat/tomcatlogs/:/usr/local/apache-tomcat-9.0.22/logs diytomcat</span><br><span class="line">3c4ca4f0c5c70bbb0875652810658a986d5894b78fe996c596a409fdf0d1204e</span><br><span class="line"># 进入镜像</span><br><span class="line">[root@localhost tomcat]# docker exec -it 3c4ca4f0c5c70bbb087565 /bin/bash</span><br></pre></td></tr></table></figure><blockquote><p>5、访问测试</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">本地测试</span></span><br><span class="line">[root@localhost tomcat]# curl localhost:9090</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Apache Tomcat/9.0.22&lt;/title&gt;</span><br><span class="line">        &lt;link href=&quot;favicon.ico&quot; rel=&quot;icon&quot; type=&quot;image/x-icon&quot; /&gt;</span><br><span class="line">        &lt;link href=&quot;favicon.ico&quot; rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; /&gt;</span><br><span class="line">        &lt;link href=&quot;tomcat.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    ... ...</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">外网测试</span></span><br></pre></td></tr></table></figure><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/27/kuangstudy5da81be9-a0ca-48d2-b653-1de1013956ad.png" alt="Dockerfile"></p><blockquote><p>6、发布项目（由于做了卷挂载，直接在本地编写项目就可以发布了）</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost tomcat]# cd test</span><br><span class="line">[root@localhost test]# mkdir WEB-INF</span><br><span class="line">[root@localhost test]# cd WEB-INF</span><br><span class="line">[root@localhost WEB-INF]# vi web.xml</span><br><span class="line">[root@localhost test]# vi index.jsp</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><br><span class="line">            xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">                  xsi:schemaLocation=<span class="string">&quot;http://java.sun.com/xml/ns/javaee</span></span><br><span class="line"><span class="string">                                                     http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span><br><span class="line">                  version=<span class="string">&quot;2.5&quot;</span>&gt;</span><br><span class="line"> &lt;/web-app&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;Hello,Candy&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        Hello World!&lt;br/&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">        System.out.println(<span class="string">&quot;----My test web logs----&quot;</span>);</span><br><span class="line">        %&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>发现：项目部署成功，可以直接访问！</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/27/kuangstudyb1a4c3b5-03bb-4624-848b-d76cc89251a1.png" alt="Dockerfile"></p><p>以后开发的步骤：需要掌握Dockerfile的编写！之后的一切都是使用Docker镜像来发布运行！</p><h3 id="8-6-发布镜像"><a href="#8-6-发布镜像" class="headerlink" title="8.6 发布镜像"></a>8.6 发布镜像</h3><blockquote><p>DockerHub</p></blockquote><p>1.地址 <a href="https://hub.docker.com/">https://hub.docker.com/</a> 注册自己的账号</p><p>2.确定这个账号可以登录<br>3.在服务器上提交自己的镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker login --help</span><br><span class="line">Usage:  docker login [OPTIONS] [SERVER]</span><br><span class="line">Log in to a Docker registry.</span><br><span class="line">If no server is specified, the default is defined by the daemon.</span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string   Username</span><br></pre></td></tr></table></figure><p>4.登录完毕后提交镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">登录</span></span><br><span class="line">[root@localhost ~]# docker login -u candy821</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line">Login Succeeded</span><br><span class="line"><span class="meta"># </span><span class="language-bash">提交镜像，带上版本号，否则会被拒绝</span></span><br><span class="line">[root@localhost ~]# docker push diytomcat</span><br><span class="line">Using default tag: latest</span><br><span class="line">The push refers to repository [docker.io/library/diytomcat]</span><br><span class="line">3514cac4541c: Preparing </span><br><span class="line">b9a3a8ee3650: Preparing </span><br><span class="line">aac332cceb25: Preparing </span><br><span class="line">74ddd0ec08fa: Preparing </span><br><span class="line">denied: requested access to the resource is denied    # 被拒绝</span><br><span class="line"><span class="meta"># </span><span class="language-bash">解决，重新命名</span></span><br><span class="line">[root@localhost ~]# docker push candy821/diytomcat:1.0</span><br><span class="line">The push refers to repository [docker.io/candy821/diytomcat]</span><br><span class="line">An image does not exist locally with the tag: candy821/diytomcat</span><br><span class="line"><span class="meta"># </span><span class="language-bash">重新命名再提交</span></span><br><span class="line">[root@localhost ~]# docker tag 89f2a31cc01a candy821/tomcat:1.0</span><br><span class="line">[root@localhost ~]# docker push candy821/tomcat:1.0</span><br><span class="line">The push refers to repository [docker.io/candy821/tomcat]</span><br><span class="line">3514cac4541c: Pushed </span><br><span class="line">b9a3a8ee3650: Pushed </span><br><span class="line">aac332cceb25: Pushed </span><br><span class="line">74ddd0ec08fa: Pushed </span><br><span class="line">1.0: digest: sha256:73540a37afd6060c8989966e0bdc4f9b2906319ce3ed0fe3ba50d11c1ee71bc4 size: 1161</span><br></pre></td></tr></table></figure><p>5.退出登录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker logout</span><br></pre></td></tr></table></figure><blockquote><p>阿里云镜像(本人没有阿里云，所以这个地方不写了)</p></blockquote><p>1.登录阿里云<br>2.找到镜像服务<br>3.创建命名空间<br>4.创建容器镜像<br>5.浏览页面信息</p><h2 id="9-小结"><a href="#9-小结" class="headerlink" title="9 小结"></a>9 小结</h2><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/29/kuangstudydfed7e28-ccb3-4ee4-a25b-a1f4f7ec474b.png" alt="Docker总结"></p><h2 id="10-Docker网络"><a href="#10-Docker网络" class="headerlink" title="10 Docker网络"></a>10 Docker网络</h2><h3 id="10-1-理解Docker网络"><a href="#10-1-理解Docker网络" class="headerlink" title="10.1 理解Docker网络"></a>10.1 理解Docker网络</h3><blockquote><p>清空所有环境</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">删除所有容器</span></span><br><span class="line">[root@localhost ~]# docker rm -f $(docker ps -aq)</span><br><span class="line"><span class="meta"># </span><span class="language-bash">删除所有镜像</span></span><br><span class="line">[root@localhost ~]# docker rmi -f $(docker images -aq)</span><br></pre></td></tr></table></figure><blockquote><p>Docker是如何处理容器网络访问的</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">运行容器</span></span><br><span class="line">[root@localhost ~]# docker run -d -P --name tomcat01 tomcat</span><br><span class="line"><span class="meta"># </span><span class="language-bash">查看容器内部网络地址</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">若没有被阉割命令</span></span><br><span class="line">[root@localhost ~]# docker exec -it tomcat01 ip addr</span><br><span class="line"><span class="meta"># </span><span class="language-bash">若被阉割命令，先进入容器</span></span><br><span class="line">[root@localhost ~]# docker exec -it tomcat01 /bin/bash</span><br><span class="line"><span class="meta"># </span><span class="language-bash">再查看</span></span><br><span class="line">root@3e7a784d1d49:/usr/local/tomcat# cat /etc/hosts</span><br><span class="line">127.0.0.1    localhost</span><br><span class="line">::1    localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0    ip6-localnet</span><br><span class="line">ff00::0    ip6-mcastprefix</span><br><span class="line">ff02::1    ip6-allnodes</span><br><span class="line">ff02::2    ip6-allrouters</span><br><span class="line">172.17.0.2    3e7a784d1d49</span><br><span class="line"><span class="meta"># </span><span class="language-bash">Linux能不能ping通容器内部</span></span><br><span class="line">[root@localhost ~]# ping 172.17.0.2</span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.065 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.071 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.127 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=4 ttl=64 time=0.050 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=5 ttl=64 time=0.060 ms</span><br><span class="line">... ...</span><br><span class="line"><span class="meta"># </span><span class="language-bash">Linux可以ping通docker容器内部</span></span><br></pre></td></tr></table></figure><blockquote><p>原理</p></blockquote><p>1.每启动一个Docker容器，Docker就会给Docker容器分配一个IP，只要安装了Docker，就会有一个网卡Docker桥接模式，使用的技术是 evth-pair技术再次测试ip addr</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/29/kuangstudy89c8fceb-a67b-4775-93bb-9e8c9cbdde63.png" alt="Docker网络"></p><p>2.在启动一个容器测试，发现又多了一对网卡</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/29/kuangstudy4ee257b9-6541-4d9f-ad42-44582d3bf4c3.png" alt="Docker网络"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">发现这个容器带来的网卡，都是一对一对的</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">evth-pair 就是一对虚拟设备接口，他们都是成对出现的，一端连着协议，一端彼此相连</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">正因为有这个特性，evth-pair 充当一个桥梁，连接各种虚拟网络设备的</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">OpenStac，Docker容器之间的连接，OVS的连接，都是使用 evth-pair 技术</span></span><br></pre></td></tr></table></figure><p>3.测试 tomcat01 和 tomcat02 是否可以ping通</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker exec -it tomcat02 ping 172.17.0.2</span><br><span class="line"><span class="meta"># </span><span class="language-bash">结论：容器和容器之间是可以互相ping通的</span></span><br></pre></td></tr></table></figure><p>绘制一个网络模型图：</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/29/kuangstudy413f4fca-d089-485a-a3dd-d12f4bdc132f.png" alt="Docker网络"></p><p>- 结论：Tomcat01和Tomcat02是公用的一个路由器，Docker0。</p><p>所有的容器不指定网络的情况下，都是Docker0路由的，Docker会给我们的容器分配一个默认的可用IP。</p><blockquote><p>小结</p></blockquote><p>Docker使用的是Linux的桥接，宿主机是一个Docker容器的网桥</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/29/kuangstudy9878678f-8608-441b-8a7e-072d0e717204.png" alt="Docker网络"></p><p>Docker中的所有的网络接口都是虚拟的，虚拟的转发效率高！(内网传递文件！)</p><p>只要容器删除，对应网桥一对就没了。</p><h3 id="10-2-—link"><a href="#10-2-—link" class="headerlink" title="10.2 —link"></a>10.2 —link</h3><blockquote><p>思考一个场景：我们编写了一个微服务，database url&#x3D;ip: ，项目不重启，数据库ip换了，我们希望可以处理这个问题，可以通过名字来进行访问容器？</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">如何可以解决呢？</span></span><br><span class="line">[root@localhost ~]# docker exec -it tomcat02 ping tomcat01</span><br><span class="line">ping: tomcat01: Name or service not known</span><br><span class="line"><span class="meta"># </span><span class="language-bash">通过 --<span class="built_in">link</span> 就可以解决网络连通问题</span></span><br><span class="line">[root@localhost ~]# docker run -d -P --name tomcat03 --link tomcat02 tomcat</span><br><span class="line">8d727b26b070698d3a84db2b6269f1a86edbb1c110a23c2733addef16f6e3bef</span><br><span class="line">[root@localhost ~]# docker exec -it tomcat03 ping tomcat02</span><br><span class="line"><span class="meta"># </span><span class="language-bash">反向可以ping通吗</span></span><br><span class="line">[root@localhost ~]# docker exec -it tomcat02 ping tomcat03</span><br><span class="line">ping: tomcat03: Name or service not known</span><br></pre></td></tr></table></figure><p>- 探究：<code>docker network inspect bridge</code></p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/12/29/kuangstudye4b9c132-753c-489f-b6b1-7dfcf1410a02.png" alt="Docker网络"></p><p>其实这个tomcat03就是在本地配置了tomcat02的配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">查看 hosts 配置，原理发现</span></span><br><span class="line">[root@localhost ~]# docker exec -it tomcat03 cat /etc/hosts</span><br><span class="line">127.0.0.1    localhost</span><br><span class="line">::1    localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0    ip6-localnet</span><br><span class="line">ff00::0    ip6-mcastprefix</span><br><span class="line">ff02::1    ip6-allnodes</span><br><span class="line">ff02::2    ip6-allrouters</span><br><span class="line">172.17.0.3    tomcat02 6846b34d8575</span><br><span class="line">172.17.0.4    8d727b26b070</span><br></pre></td></tr></table></figure><blockquote><p>本质探究</p></blockquote><p><strong>—link</strong>就是我们在hosts配置中增加了一个<code>172.17.0.3 tomcat02 6846b34d8575</code>的映射，但是现在学习Docker已经不建议使用 —link 了，自定义网络不适用于Docker0！！！</p><p>Docker0问题：不支持容器名连接访问</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 容器技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux：常用的基本命令</title>
      <link href="/2022/02/17/Linux%EF%BC%9A%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/02/17/Linux%EF%BC%9A%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><blockquote><p>绝对路径和相对路径</p></blockquote><p>我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 &#x2F;。</p><p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p><p>在开始本教程前我们需要先知道什么是绝对路径与相对路径。</p><p><strong>绝对路径：</strong></p><p>路径的写法，由根目录 &#x2F; 写起，例如：&#x2F;usr&#x2F;share&#x2F;doc 这个目录。</p><p><strong>相对路径：</strong></p><p>路径的写法，不是由 &#x2F; 写起，例如由 &#x2F;usr&#x2F;share&#x2F;doc 要到 &#x2F;usr&#x2F;share&#x2F;man 底下时，可以写成：cd ..&#x2F;man 这就是相对路径的写法啦！</p><blockquote><p>处理目录的常用命令</p></blockquote><p>接下来我们就来看几个常见的处理目录的命令吧：</p><ul><li>ls: 列出目录</li><li>cd：切换目录</li><li>pwd：显示目前的目录</li><li>mkdir：创建一个新的目录</li><li>rmdir：删除一个空的目录</li><li>cp: 复制文件或目录</li><li>rm: 移除文件或目录</li><li>mv: 移动文件与目录，或修改文件与目录的名称</li></ul><p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p><blockquote><p>ls （列出目录）</p></blockquote><p>在Linux系统当中， ls 命令可能是最常被运行的。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li><li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li></ul><p>将目录下的所有文件列出来(含属性与隐藏档)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# ls -al ~</span><br></pre></td></tr></table></figure><blockquote><p>cd （切换目录）</p></blockquote><p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd [相对路径或绝对路径]</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 切换到用户目录下</span><br><span class="line">[root@kuangshen /]# cd home  </span><br><span class="line"></span><br><span class="line"># 使用 mkdir 命令创建 kuangstudy 目录</span><br><span class="line">[root@kuangshen home]# mkdir kuangstudy</span><br><span class="line"></span><br><span class="line"># 进入 kuangstudy 目录</span><br><span class="line">[root@kuangshen home]# cd kuangstudy</span><br><span class="line"></span><br><span class="line"># 回到上一级</span><br><span class="line">[root@kuangshen kuangstudy]# cd ..</span><br><span class="line"></span><br><span class="line"># 回到根目录</span><br><span class="line">[root@kuangshen kuangstudy]# cd /</span><br><span class="line"></span><br><span class="line"># 表示回到自己的家目录，亦即是 /root 这个目录</span><br><span class="line">[root@kuangshen kuangstudy]# cd ~</span><br></pre></td></tr></table></figure><p>接下来大家多操作几次应该就可以很好的理解 cd 命令的。</p><blockquote><p>pwd ( 显示目前所在的目录 )</p></blockquote><p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen kuangstudy]#pwd [-P]</span><br></pre></td></tr></table></figure><p>选项与参数：**-P** ：显示出确实的路径，而非使用连接(link) 路径。</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 单纯显示出目前的工作目录</span><br><span class="line">[root@kuangshen ~]# pwd</span><br><span class="line">/root</span><br><span class="line"></span><br><span class="line"># 如果是链接，要显示真实地址，可以使用 -P参数</span><br><span class="line">[root@kuangshen /]# cd bin</span><br><span class="line">[root@kuangshen bin]# pwd -P</span><br><span class="line">/usr/bin</span><br></pre></td></tr></table></figure><blockquote><p>mkdir （创建新目录）</p></blockquote><p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir [-mp] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li><li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li></ul><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入我们用户目录下</span><br><span class="line">[root@kuangshen /]# cd /home</span><br><span class="line"></span><br><span class="line"># 创建一个 test 文件夹</span><br><span class="line">[root@kuangshen home]# mkdir test</span><br><span class="line"></span><br><span class="line"># 创建多层级目录</span><br><span class="line">[root@kuangshen home]# mkdir test1/test2/test3/test4</span><br><span class="line">mkdir: cannot create directory ‘test1/test2/test3/test4’:</span><br><span class="line">No such file or directory  # &lt;== 没办法直接创建此目录啊！</span><br><span class="line"></span><br><span class="line"># 加了这个 -p 的选项，可以自行帮你创建多层目录！</span><br><span class="line">[root@kuangshen home]# mkdir -p test1/test2/test3/test4</span><br><span class="line"></span><br><span class="line"># 创建权限为 rwx--x--x 的目录。</span><br><span class="line">[root@kuangshen home]# mkdir -m 711 test2</span><br><span class="line">[root@kuangshen home]# ls -l</span><br><span class="line">drwxr-xr-x 2 root root  4096 Mar 12 21:55 test</span><br><span class="line">drwxr-xr-x 3 root root  4096 Mar 12 21:56 test1</span><br><span class="line">drwx--x--x 2 root root  4096 Mar 12 21:58 test2</span><br></pre></td></tr></table></figure><blockquote><p>rmdir ( 删除空的目录 )</p></blockquote><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rmdir [-p] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：**-p ：**连同上一级『空的』目录也一起删除</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 看看有多少目录存在？</span><br><span class="line">[root@kuangshen home]# ls -l</span><br><span class="line">drwxr-xr-x 2 root root  4096 Mar 12 21:55 test</span><br><span class="line">drwxr-xr-x 3 root root  4096 Mar 12 21:56 test1</span><br><span class="line">drwx--x--x 2 root root  4096 Mar 12 21:58 test2</span><br><span class="line"></span><br><span class="line"># 可直接删除掉，没问题</span><br><span class="line">[root@kuangshen home]# rmdir test</span><br><span class="line"></span><br><span class="line"># 因为尚有内容，所以无法删除！</span><br><span class="line">[root@kuangshen home]# rmdir test1</span><br><span class="line">rmdir: failed to remove ‘test1’: Directory not empty</span><br><span class="line"></span><br><span class="line"># 利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 依次删除。</span><br><span class="line">[root@kuangshen home]# rmdir -p test1/test2/test3/test4</span><br></pre></td></tr></table></figure><p>注意：这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录，后面我们会将！</p><blockquote><p>cp ( 复制文件或目录 )</p></blockquote><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# cp [-adfilprsu] 来源档(source) 目标档(destination)</span><br><span class="line">[root@www ~]# cp [options] source1 source2 source3 .... directory</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li><strong>-a：</strong>相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li><li><strong>-p：</strong>连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li><li><strong>-d：</strong>若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li><li><strong>-r：</strong>递归持续复制，用於目录的复制行为；(常用)</li><li><strong>-f：</strong>为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li><li><strong>-i：</strong>若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li><li><strong>-l：</strong>进行硬式连结(hard link)的连结档创建，而非复制文件本身。</li><li><strong>-s：</strong>复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li><li><strong>-u：</strong>若 destination 比 source 旧才升级 destination ！</li></ul><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 找一个有文件的目录，我这里找到 root目录</span><br><span class="line">[root@kuangshen home]# cd /root</span><br><span class="line">[root@kuangshen ~]# ls</span><br><span class="line">install.sh</span><br><span class="line">[root@kuangshen ~]# cd /home</span><br><span class="line"></span><br><span class="line"># 复制 root目录下的install.sh 到 home目录下</span><br><span class="line">[root@kuangshen home]# cp /root/install.sh /home</span><br><span class="line">[root@kuangshen home]# ls</span><br><span class="line">install.sh</span><br><span class="line"></span><br><span class="line"># 再次复制，加上-i参数，增加覆盖询问？</span><br><span class="line">[root@kuangshen home]# cp -i /root/install.sh /home</span><br><span class="line">cp: overwrite ‘/home/install.sh’? y # n不覆盖，y为覆盖</span><br></pre></td></tr></table></figure><blockquote><p>rm ( 移除文件或目录 )</p></blockquote><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm [-fir] 文件或目录</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li><li>-i ：互动模式，在删除前会询问使用者是否动作</li><li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li></ul><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将刚刚在 cp 的实例中创建的 install.sh删除掉！</span><br><span class="line">[root@kuangshen home]# rm -i install.sh</span><br><span class="line">rm: remove regular file ‘install.sh’? y</span><br><span class="line"># 如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！</span><br><span class="line"></span><br><span class="line"># 尽量不要在服务器上使用 rm -rf /</span><br></pre></td></tr></table></figure><blockquote><p>mv  ( 移动文件与目录，或修改名称 )</p></blockquote><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# mv [-fiu] source destination</span><br><span class="line">[root@www ~]# mv [options] source1 source2 source3 .... directory</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li><li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li></ul><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 复制一个文件到当前目录</span><br><span class="line">[root@kuangshen home]# cp /root/install.sh /home</span><br><span class="line"></span><br><span class="line"># 创建一个文件夹 test</span><br><span class="line">[root@kuangshen home]# mkdir test</span><br><span class="line"></span><br><span class="line"># 将复制过来的文件移动到我们创建的目录，并查看</span><br><span class="line">[root@kuangshen home]# mv install.sh test</span><br><span class="line">[root@kuangshen home]# ls</span><br><span class="line">test</span><br><span class="line">[root@kuangshen home]# cd test</span><br><span class="line">[root@kuangshen test]# ls</span><br><span class="line">install.sh</span><br><span class="line"></span><br><span class="line"># 将文件夹重命名，然后再次查看！</span><br><span class="line">[root@kuangshen test]# cd ..</span><br><span class="line">[root@kuangshen home]# mv test mvtest</span><br><span class="line">[root@kuangshen home]# ls</span><br><span class="line">mvtest</span><br></pre></td></tr></table></figure><h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><blockquote><p>看懂文件属性</p></blockquote><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>在Linux中我们可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组，如：</p><p><img src="C:\Users\渡\AppData\Roaming\Typora\typora-user-images\image-20220217090038574.png" alt="image-20220217090038574"></p><p>实例中，boot文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。</p><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等：</p><ul><li>当为[ <strong>d</strong> ]则是目录</li><li>当为[ <strong>-</strong> ]则是文件；</li><li>若是[ <strong>l</strong> ]则表示为链接文档 ( link file )；</li><li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</li><li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</li></ul><p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p><p>其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。</p><p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p><p>每个文件的属性由左边第一部分的10个字符来确定（如下图）：</p><p><img src="C:\Users\渡\AppData\Roaming\Typora\typora-user-images\image-20220217090052320.png" alt="image-20220217090052320"></p><p>从左至右用0-9这些数字来表示。</p><p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p><p>其中：</p><p>第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；</p><p>第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；</p><p>第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p><p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p><p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p><p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p><p>在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。</p><blockquote><p>修改文件属性</p></blockquote><p><strong>1、chgrp：更改文件属组</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chgrp [-R] 属组名 文件名</span><br></pre></td></tr></table></figure><p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p><p><strong>2、chown：更改文件属主，也可以同时更改文件属组</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown [–R] 属主名 文件名</span><br><span class="line">chown [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure><p><strong>3、chmod：更改文件9个属性</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod [-R] xyz 文件或目录</span><br></pre></td></tr></table></figure><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p><p>Linux文件的基本权限就有九个，分别是owner&#x2F;group&#x2F;others三种身份各有自己的read&#x2F;write&#x2F;execute权限。</p><p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r:4     w:2         x:1</span><br></pre></td></tr></table></figure><p>每种身份(owner&#x2F;group&#x2F;others)各自的三个权限(r&#x2F;w&#x2F;x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p><ul><li>owner &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</li><li>group &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</li><li>others&#x3D; — &#x3D; 0+0+0 &#x3D; 0</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 770 filename</span><br></pre></td></tr></table></figure><p>可以自己下去多进行测试！</p><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><blockquote><p>概述</p></blockquote><p>Linux系统中使用以下命令来查看文件的内容：</p><ul><li>cat 由第一行开始显示文件内容</li><li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li><li>nl  显示的时候，顺道输出行号！</li><li>more 一页一页的显示文件内容</li><li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li><li>head 只看头几行</li><li>tail 只看尾巴几行</li></ul><p>你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。</p><blockquote><p>cat 由第一行开始显示文件内容</p></blockquote><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat [-AbEnTv]</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li><li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li><li>-E ：将结尾的断行字节 $ 显示出来；</li><li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li><li>-T ：将 [tab] 按键以 ^I 显示出来；</li><li>-v ：列出一些看不出来的特殊字符</li></ul><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看网络配置: 文件地址 /etc/sysconfig/network-scripts/</span><br><span class="line">[root@kuangshen ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">DEVICE=eth0</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">ONBOOT=yes</span><br></pre></td></tr></table></figure><blockquote><p>tac</p></blockquote><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen ~]# tac /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">DEVICE=eth0</span><br></pre></td></tr></table></figure><blockquote><p>nl  显示行号</p></blockquote><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nl [-bnw] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li><li>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li><li>-w ：行号栏位的占用的位数。</li></ul><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen ~]# nl /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">1DEVICE=eth0</span><br><span class="line">2BOOTPROTO=dhcp</span><br><span class="line">3ONBOOT=yes</span><br></pre></td></tr></table></figure><blockquote><p>more  一页一页翻动</p></blockquote><p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p><ul><li>空白键 (space)：代表向下翻一页；</li><li>Enter   ：代表向下翻『一行』；</li><li>&#x2F;字串   ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li><li>:f    ：立刻显示出档名以及目前显示的行数；</li><li>q    ：代表立刻离开 more ，不再显示该文件内容。</li><li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# more /etc/csh.login</span><br><span class="line">....(中间省略)....</span><br><span class="line">--More--(28%) # 重点在这一行喔！你的光标也会在这里等待你的命令</span><br></pre></td></tr></table></figure><blockquote><p>less  一页一页翻动，以下实例输出&#x2F;etc&#x2F;man.config文件的内容：</p></blockquote><p>less运行时可以输入的命令有：</p><ul><li>空白键  ：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup] ：向上翻动一页；</li><li>&#x2F;字串  ：向下搜寻『字串』的功能；</li><li>?字串  ：向上搜寻『字串』的功能；</li><li>n   ：重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</li><li>N   ：反向的重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</li><li>q   ：离开 less 这个程序；</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# more /etc/csh.login</span><br><span class="line">....(中间省略)....</span><br><span class="line">:   # 这里可以等待你输入命令！</span><br></pre></td></tr></table></figure><blockquote><p>head  取出文件前面几行</p></blockquote><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">head [-n number] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：**-n** 后面接数字，代表显示几行的意思！</p><p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# head -n 20 /etc/csh.login</span><br></pre></td></tr></table></figure><blockquote><p>tail  取出文件后面几行</p></blockquote><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail [-n number] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-n ：后面接数字，代表显示几行的意思</li></ul><p>默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# tail -n 20 /etc/csh.login</span><br></pre></td></tr></table></figure><blockquote><p>拓展：Linux 链接概念</p></blockquote><p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。</p><p>情况下，<strong>ln</strong> 命令产生硬链接。</p><p><strong>硬连接</strong></p><p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。</p><p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p><p><strong>软连接</strong></p><p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p><p><strong>测试：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen /]# cd /home</span><br><span class="line">[root@kuangshen home]# touch f1 # 创建一个测试文件f1</span><br><span class="line">[root@kuangshen home]# ls</span><br><span class="line">f1</span><br><span class="line">[root@kuangshen home]# ln f1 f2     # 创建f1的一个硬连接文件f2</span><br><span class="line">[root@kuangshen home]# ln -s f1 f3   # 创建f1的一个符号连接文件f3</span><br><span class="line">[root@kuangshen home]# ls -li       # -i参数显示文件的inode节点信息</span><br><span class="line">397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f1</span><br><span class="line">397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f2</span><br><span class="line">397248 lrwxrwxrwx 1 root root     2 Mar 13 00:50 f3 -&gt; f1</span><br></pre></td></tr></table></figure><p>从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 397247，然而符号连接文件的 inode 节点不同。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># echo 字符串输出 &gt;&gt; f1 输出到 f1文件</span><br><span class="line">[root@kuangshen home]# echo &quot;I am f1 file&quot; &gt;&gt;f1</span><br><span class="line">[root@kuangshen home]# cat f1</span><br><span class="line">I am f1 file</span><br><span class="line">[root@kuangshen home]# cat f2</span><br><span class="line">I am f1 file</span><br><span class="line">[root@kuangshen home]# cat f3</span><br><span class="line">I am f1 file</span><br><span class="line">[root@kuangshen home]# rm -f f1</span><br><span class="line">[root@kuangshen home]# cat f2</span><br><span class="line">I am f1 file</span><br><span class="line">[root@kuangshen home]# cat f3</span><br><span class="line">cat: f3: No such file or directory</span><br></pre></td></tr></table></figure><p>通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f1 文件无效；</p><p>依此您可以做一些相关的测试，可以得到以下全部结论：</p><ul><li>删除符号连接f3,对f1,f2无影响；</li><li>删除硬连接f2，对f1,f3也无影响；</li><li>删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；</li><li>同时删除原文件f1,硬连接f2，整个文件会真正的被删除。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
